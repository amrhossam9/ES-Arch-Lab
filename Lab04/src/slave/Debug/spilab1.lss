
spilab1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000294c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  0000294c  000029c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001e18  00000000  00000000  000029c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000c09  00000000  00000000  000047e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  000053e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00005529  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00005699  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  000072e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  000081cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00008f7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  000090dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00009369  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00009b37  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e4       	ldi	r30, 0x4C	; 76
      68:	f9 e2       	ldi	r31, 0x29	; 41
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 36       	cpi	r26, 0x68	; 104
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 32 13 	call	0x2664	; 0x2664 <main>
      7a:	0c 94 a4 14 	jmp	0x2948	; 0x2948 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 28 14 	jmp	0x2850	; 0x2850 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 44 14 	jmp	0x2888	; 0x2888 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 34 14 	jmp	0x2868	; 0x2868 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 50 14 	jmp	0x28a0	; 0x28a0 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 34 14 	jmp	0x2868	; 0x2868 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 50 14 	jmp	0x28a0	; 0x28a0 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 28 14 	jmp	0x2850	; 0x2850 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 44 14 	jmp	0x2888	; 0x2888 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 34 14 	jmp	0x2868	; 0x2868 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 50 14 	jmp	0x28a0	; 0x28a0 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 34 14 	jmp	0x2868	; 0x2868 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 50 14 	jmp	0x28a0	; 0x28a0 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 34 14 	jmp	0x2868	; 0x2868 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 50 14 	jmp	0x28a0	; 0x28a0 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 38 14 	jmp	0x2870	; 0x2870 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 54 14 	jmp	0x28a8	; 0x28a8 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <GPIO_setupPinDirection>:
#include "common_macros.h"
#include "avr/io.h"


void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	00 d0       	rcall	.+0      	; 0xb3c <GPIO_setupPinDirection+0x6>
     b3c:	00 d0       	rcall	.+0      	; 0xb3e <GPIO_setupPinDirection+0x8>
     b3e:	0f 92       	push	r0
     b40:	cd b7       	in	r28, 0x3d	; 61
     b42:	de b7       	in	r29, 0x3e	; 62
     b44:	89 83       	std	Y+1, r24	; 0x01
     b46:	6a 83       	std	Y+2, r22	; 0x02
     b48:	4b 83       	std	Y+3, r20	; 0x03

	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     b4a:	8a 81       	ldd	r24, Y+2	; 0x02
     b4c:	88 30       	cpi	r24, 0x08	; 8
     b4e:	08 f0       	brcs	.+2      	; 0xb52 <GPIO_setupPinDirection+0x1c>
     b50:	d5 c0       	rjmp	.+426    	; 0xcfc <GPIO_setupPinDirection+0x1c6>
     b52:	89 81       	ldd	r24, Y+1	; 0x01
     b54:	84 30       	cpi	r24, 0x04	; 4
     b56:	08 f0       	brcs	.+2      	; 0xb5a <GPIO_setupPinDirection+0x24>
     b58:	d1 c0       	rjmp	.+418    	; 0xcfc <GPIO_setupPinDirection+0x1c6>
	{
	}
	else
	{
		switch(port_num)
     b5a:	89 81       	ldd	r24, Y+1	; 0x01
     b5c:	28 2f       	mov	r18, r24
     b5e:	30 e0       	ldi	r19, 0x00	; 0
     b60:	3d 83       	std	Y+5, r19	; 0x05
     b62:	2c 83       	std	Y+4, r18	; 0x04
     b64:	8c 81       	ldd	r24, Y+4	; 0x04
     b66:	9d 81       	ldd	r25, Y+5	; 0x05
     b68:	81 30       	cpi	r24, 0x01	; 1
     b6a:	91 05       	cpc	r25, r1
     b6c:	09 f4       	brne	.+2      	; 0xb70 <GPIO_setupPinDirection+0x3a>
     b6e:	43 c0       	rjmp	.+134    	; 0xbf6 <GPIO_setupPinDirection+0xc0>
     b70:	2c 81       	ldd	r18, Y+4	; 0x04
     b72:	3d 81       	ldd	r19, Y+5	; 0x05
     b74:	22 30       	cpi	r18, 0x02	; 2
     b76:	31 05       	cpc	r19, r1
     b78:	2c f4       	brge	.+10     	; 0xb84 <GPIO_setupPinDirection+0x4e>
     b7a:	8c 81       	ldd	r24, Y+4	; 0x04
     b7c:	9d 81       	ldd	r25, Y+5	; 0x05
     b7e:	00 97       	sbiw	r24, 0x00	; 0
     b80:	71 f0       	breq	.+28     	; 0xb9e <GPIO_setupPinDirection+0x68>
     b82:	bc c0       	rjmp	.+376    	; 0xcfc <GPIO_setupPinDirection+0x1c6>
     b84:	2c 81       	ldd	r18, Y+4	; 0x04
     b86:	3d 81       	ldd	r19, Y+5	; 0x05
     b88:	22 30       	cpi	r18, 0x02	; 2
     b8a:	31 05       	cpc	r19, r1
     b8c:	09 f4       	brne	.+2      	; 0xb90 <GPIO_setupPinDirection+0x5a>
     b8e:	5f c0       	rjmp	.+190    	; 0xc4e <GPIO_setupPinDirection+0x118>
     b90:	8c 81       	ldd	r24, Y+4	; 0x04
     b92:	9d 81       	ldd	r25, Y+5	; 0x05
     b94:	83 30       	cpi	r24, 0x03	; 3
     b96:	91 05       	cpc	r25, r1
     b98:	09 f4       	brne	.+2      	; 0xb9c <GPIO_setupPinDirection+0x66>
     b9a:	85 c0       	rjmp	.+266    	; 0xca6 <GPIO_setupPinDirection+0x170>
     b9c:	af c0       	rjmp	.+350    	; 0xcfc <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     b9e:	8b 81       	ldd	r24, Y+3	; 0x03
     ba0:	81 30       	cpi	r24, 0x01	; 1
     ba2:	a1 f4       	brne	.+40     	; 0xbcc <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     ba4:	aa e3       	ldi	r26, 0x3A	; 58
     ba6:	b0 e0       	ldi	r27, 0x00	; 0
     ba8:	ea e3       	ldi	r30, 0x3A	; 58
     baa:	f0 e0       	ldi	r31, 0x00	; 0
     bac:	80 81       	ld	r24, Z
     bae:	48 2f       	mov	r20, r24
     bb0:	8a 81       	ldd	r24, Y+2	; 0x02
     bb2:	28 2f       	mov	r18, r24
     bb4:	30 e0       	ldi	r19, 0x00	; 0
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	02 2e       	mov	r0, r18
     bbc:	02 c0       	rjmp	.+4      	; 0xbc2 <GPIO_setupPinDirection+0x8c>
     bbe:	88 0f       	add	r24, r24
     bc0:	99 1f       	adc	r25, r25
     bc2:	0a 94       	dec	r0
     bc4:	e2 f7       	brpl	.-8      	; 0xbbe <GPIO_setupPinDirection+0x88>
     bc6:	84 2b       	or	r24, r20
     bc8:	8c 93       	st	X, r24
     bca:	98 c0       	rjmp	.+304    	; 0xcfc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     bcc:	aa e3       	ldi	r26, 0x3A	; 58
     bce:	b0 e0       	ldi	r27, 0x00	; 0
     bd0:	ea e3       	ldi	r30, 0x3A	; 58
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	80 81       	ld	r24, Z
     bd6:	48 2f       	mov	r20, r24
     bd8:	8a 81       	ldd	r24, Y+2	; 0x02
     bda:	28 2f       	mov	r18, r24
     bdc:	30 e0       	ldi	r19, 0x00	; 0
     bde:	81 e0       	ldi	r24, 0x01	; 1
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	02 2e       	mov	r0, r18
     be4:	02 c0       	rjmp	.+4      	; 0xbea <GPIO_setupPinDirection+0xb4>
     be6:	88 0f       	add	r24, r24
     be8:	99 1f       	adc	r25, r25
     bea:	0a 94       	dec	r0
     bec:	e2 f7       	brpl	.-8      	; 0xbe6 <GPIO_setupPinDirection+0xb0>
     bee:	80 95       	com	r24
     bf0:	84 23       	and	r24, r20
     bf2:	8c 93       	st	X, r24
     bf4:	83 c0       	rjmp	.+262    	; 0xcfc <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     bf6:	8b 81       	ldd	r24, Y+3	; 0x03
     bf8:	81 30       	cpi	r24, 0x01	; 1
     bfa:	a1 f4       	brne	.+40     	; 0xc24 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     bfc:	a7 e3       	ldi	r26, 0x37	; 55
     bfe:	b0 e0       	ldi	r27, 0x00	; 0
     c00:	e7 e3       	ldi	r30, 0x37	; 55
     c02:	f0 e0       	ldi	r31, 0x00	; 0
     c04:	80 81       	ld	r24, Z
     c06:	48 2f       	mov	r20, r24
     c08:	8a 81       	ldd	r24, Y+2	; 0x02
     c0a:	28 2f       	mov	r18, r24
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	81 e0       	ldi	r24, 0x01	; 1
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	02 2e       	mov	r0, r18
     c14:	02 c0       	rjmp	.+4      	; 0xc1a <GPIO_setupPinDirection+0xe4>
     c16:	88 0f       	add	r24, r24
     c18:	99 1f       	adc	r25, r25
     c1a:	0a 94       	dec	r0
     c1c:	e2 f7       	brpl	.-8      	; 0xc16 <GPIO_setupPinDirection+0xe0>
     c1e:	84 2b       	or	r24, r20
     c20:	8c 93       	st	X, r24
     c22:	6c c0       	rjmp	.+216    	; 0xcfc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     c24:	a7 e3       	ldi	r26, 0x37	; 55
     c26:	b0 e0       	ldi	r27, 0x00	; 0
     c28:	e7 e3       	ldi	r30, 0x37	; 55
     c2a:	f0 e0       	ldi	r31, 0x00	; 0
     c2c:	80 81       	ld	r24, Z
     c2e:	48 2f       	mov	r20, r24
     c30:	8a 81       	ldd	r24, Y+2	; 0x02
     c32:	28 2f       	mov	r18, r24
     c34:	30 e0       	ldi	r19, 0x00	; 0
     c36:	81 e0       	ldi	r24, 0x01	; 1
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	02 2e       	mov	r0, r18
     c3c:	02 c0       	rjmp	.+4      	; 0xc42 <GPIO_setupPinDirection+0x10c>
     c3e:	88 0f       	add	r24, r24
     c40:	99 1f       	adc	r25, r25
     c42:	0a 94       	dec	r0
     c44:	e2 f7       	brpl	.-8      	; 0xc3e <GPIO_setupPinDirection+0x108>
     c46:	80 95       	com	r24
     c48:	84 23       	and	r24, r20
     c4a:	8c 93       	st	X, r24
     c4c:	57 c0       	rjmp	.+174    	; 0xcfc <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     c4e:	8b 81       	ldd	r24, Y+3	; 0x03
     c50:	81 30       	cpi	r24, 0x01	; 1
     c52:	a1 f4       	brne	.+40     	; 0xc7c <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     c54:	a4 e3       	ldi	r26, 0x34	; 52
     c56:	b0 e0       	ldi	r27, 0x00	; 0
     c58:	e4 e3       	ldi	r30, 0x34	; 52
     c5a:	f0 e0       	ldi	r31, 0x00	; 0
     c5c:	80 81       	ld	r24, Z
     c5e:	48 2f       	mov	r20, r24
     c60:	8a 81       	ldd	r24, Y+2	; 0x02
     c62:	28 2f       	mov	r18, r24
     c64:	30 e0       	ldi	r19, 0x00	; 0
     c66:	81 e0       	ldi	r24, 0x01	; 1
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	02 2e       	mov	r0, r18
     c6c:	02 c0       	rjmp	.+4      	; 0xc72 <GPIO_setupPinDirection+0x13c>
     c6e:	88 0f       	add	r24, r24
     c70:	99 1f       	adc	r25, r25
     c72:	0a 94       	dec	r0
     c74:	e2 f7       	brpl	.-8      	; 0xc6e <GPIO_setupPinDirection+0x138>
     c76:	84 2b       	or	r24, r20
     c78:	8c 93       	st	X, r24
     c7a:	40 c0       	rjmp	.+128    	; 0xcfc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     c7c:	a4 e3       	ldi	r26, 0x34	; 52
     c7e:	b0 e0       	ldi	r27, 0x00	; 0
     c80:	e4 e3       	ldi	r30, 0x34	; 52
     c82:	f0 e0       	ldi	r31, 0x00	; 0
     c84:	80 81       	ld	r24, Z
     c86:	48 2f       	mov	r20, r24
     c88:	8a 81       	ldd	r24, Y+2	; 0x02
     c8a:	28 2f       	mov	r18, r24
     c8c:	30 e0       	ldi	r19, 0x00	; 0
     c8e:	81 e0       	ldi	r24, 0x01	; 1
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	02 2e       	mov	r0, r18
     c94:	02 c0       	rjmp	.+4      	; 0xc9a <GPIO_setupPinDirection+0x164>
     c96:	88 0f       	add	r24, r24
     c98:	99 1f       	adc	r25, r25
     c9a:	0a 94       	dec	r0
     c9c:	e2 f7       	brpl	.-8      	; 0xc96 <GPIO_setupPinDirection+0x160>
     c9e:	80 95       	com	r24
     ca0:	84 23       	and	r24, r20
     ca2:	8c 93       	st	X, r24
     ca4:	2b c0       	rjmp	.+86     	; 0xcfc <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     ca6:	8b 81       	ldd	r24, Y+3	; 0x03
     ca8:	81 30       	cpi	r24, 0x01	; 1
     caa:	a1 f4       	brne	.+40     	; 0xcd4 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     cac:	a1 e3       	ldi	r26, 0x31	; 49
     cae:	b0 e0       	ldi	r27, 0x00	; 0
     cb0:	e1 e3       	ldi	r30, 0x31	; 49
     cb2:	f0 e0       	ldi	r31, 0x00	; 0
     cb4:	80 81       	ld	r24, Z
     cb6:	48 2f       	mov	r20, r24
     cb8:	8a 81       	ldd	r24, Y+2	; 0x02
     cba:	28 2f       	mov	r18, r24
     cbc:	30 e0       	ldi	r19, 0x00	; 0
     cbe:	81 e0       	ldi	r24, 0x01	; 1
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	02 2e       	mov	r0, r18
     cc4:	02 c0       	rjmp	.+4      	; 0xcca <GPIO_setupPinDirection+0x194>
     cc6:	88 0f       	add	r24, r24
     cc8:	99 1f       	adc	r25, r25
     cca:	0a 94       	dec	r0
     ccc:	e2 f7       	brpl	.-8      	; 0xcc6 <GPIO_setupPinDirection+0x190>
     cce:	84 2b       	or	r24, r20
     cd0:	8c 93       	st	X, r24
     cd2:	14 c0       	rjmp	.+40     	; 0xcfc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     cd4:	a1 e3       	ldi	r26, 0x31	; 49
     cd6:	b0 e0       	ldi	r27, 0x00	; 0
     cd8:	e1 e3       	ldi	r30, 0x31	; 49
     cda:	f0 e0       	ldi	r31, 0x00	; 0
     cdc:	80 81       	ld	r24, Z
     cde:	48 2f       	mov	r20, r24
     ce0:	8a 81       	ldd	r24, Y+2	; 0x02
     ce2:	28 2f       	mov	r18, r24
     ce4:	30 e0       	ldi	r19, 0x00	; 0
     ce6:	81 e0       	ldi	r24, 0x01	; 1
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	02 2e       	mov	r0, r18
     cec:	02 c0       	rjmp	.+4      	; 0xcf2 <GPIO_setupPinDirection+0x1bc>
     cee:	88 0f       	add	r24, r24
     cf0:	99 1f       	adc	r25, r25
     cf2:	0a 94       	dec	r0
     cf4:	e2 f7       	brpl	.-8      	; 0xcee <GPIO_setupPinDirection+0x1b8>
     cf6:	80 95       	com	r24
     cf8:	84 23       	and	r24, r20
     cfa:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     cfc:	0f 90       	pop	r0
     cfe:	0f 90       	pop	r0
     d00:	0f 90       	pop	r0
     d02:	0f 90       	pop	r0
     d04:	0f 90       	pop	r0
     d06:	cf 91       	pop	r28
     d08:	df 91       	pop	r29
     d0a:	08 95       	ret

00000d0c <GPIO_writePin>:


void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     d0c:	df 93       	push	r29
     d0e:	cf 93       	push	r28
     d10:	00 d0       	rcall	.+0      	; 0xd12 <GPIO_writePin+0x6>
     d12:	00 d0       	rcall	.+0      	; 0xd14 <GPIO_writePin+0x8>
     d14:	0f 92       	push	r0
     d16:	cd b7       	in	r28, 0x3d	; 61
     d18:	de b7       	in	r29, 0x3e	; 62
     d1a:	89 83       	std	Y+1, r24	; 0x01
     d1c:	6a 83       	std	Y+2, r22	; 0x02
     d1e:	4b 83       	std	Y+3, r20	; 0x03

	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     d20:	8a 81       	ldd	r24, Y+2	; 0x02
     d22:	88 30       	cpi	r24, 0x08	; 8
     d24:	08 f0       	brcs	.+2      	; 0xd28 <GPIO_writePin+0x1c>
     d26:	d5 c0       	rjmp	.+426    	; 0xed2 <GPIO_writePin+0x1c6>
     d28:	89 81       	ldd	r24, Y+1	; 0x01
     d2a:	84 30       	cpi	r24, 0x04	; 4
     d2c:	08 f0       	brcs	.+2      	; 0xd30 <GPIO_writePin+0x24>
     d2e:	d1 c0       	rjmp	.+418    	; 0xed2 <GPIO_writePin+0x1c6>
	{
	}
	else
	{
		switch(port_num)
     d30:	89 81       	ldd	r24, Y+1	; 0x01
     d32:	28 2f       	mov	r18, r24
     d34:	30 e0       	ldi	r19, 0x00	; 0
     d36:	3d 83       	std	Y+5, r19	; 0x05
     d38:	2c 83       	std	Y+4, r18	; 0x04
     d3a:	8c 81       	ldd	r24, Y+4	; 0x04
     d3c:	9d 81       	ldd	r25, Y+5	; 0x05
     d3e:	81 30       	cpi	r24, 0x01	; 1
     d40:	91 05       	cpc	r25, r1
     d42:	09 f4       	brne	.+2      	; 0xd46 <GPIO_writePin+0x3a>
     d44:	43 c0       	rjmp	.+134    	; 0xdcc <GPIO_writePin+0xc0>
     d46:	2c 81       	ldd	r18, Y+4	; 0x04
     d48:	3d 81       	ldd	r19, Y+5	; 0x05
     d4a:	22 30       	cpi	r18, 0x02	; 2
     d4c:	31 05       	cpc	r19, r1
     d4e:	2c f4       	brge	.+10     	; 0xd5a <GPIO_writePin+0x4e>
     d50:	8c 81       	ldd	r24, Y+4	; 0x04
     d52:	9d 81       	ldd	r25, Y+5	; 0x05
     d54:	00 97       	sbiw	r24, 0x00	; 0
     d56:	71 f0       	breq	.+28     	; 0xd74 <GPIO_writePin+0x68>
     d58:	bc c0       	rjmp	.+376    	; 0xed2 <GPIO_writePin+0x1c6>
     d5a:	2c 81       	ldd	r18, Y+4	; 0x04
     d5c:	3d 81       	ldd	r19, Y+5	; 0x05
     d5e:	22 30       	cpi	r18, 0x02	; 2
     d60:	31 05       	cpc	r19, r1
     d62:	09 f4       	brne	.+2      	; 0xd66 <GPIO_writePin+0x5a>
     d64:	5f c0       	rjmp	.+190    	; 0xe24 <GPIO_writePin+0x118>
     d66:	8c 81       	ldd	r24, Y+4	; 0x04
     d68:	9d 81       	ldd	r25, Y+5	; 0x05
     d6a:	83 30       	cpi	r24, 0x03	; 3
     d6c:	91 05       	cpc	r25, r1
     d6e:	09 f4       	brne	.+2      	; 0xd72 <GPIO_writePin+0x66>
     d70:	85 c0       	rjmp	.+266    	; 0xe7c <GPIO_writePin+0x170>
     d72:	af c0       	rjmp	.+350    	; 0xed2 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
     d74:	8b 81       	ldd	r24, Y+3	; 0x03
     d76:	81 30       	cpi	r24, 0x01	; 1
     d78:	a1 f4       	brne	.+40     	; 0xda2 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
     d7a:	ab e3       	ldi	r26, 0x3B	; 59
     d7c:	b0 e0       	ldi	r27, 0x00	; 0
     d7e:	eb e3       	ldi	r30, 0x3B	; 59
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	80 81       	ld	r24, Z
     d84:	48 2f       	mov	r20, r24
     d86:	8a 81       	ldd	r24, Y+2	; 0x02
     d88:	28 2f       	mov	r18, r24
     d8a:	30 e0       	ldi	r19, 0x00	; 0
     d8c:	81 e0       	ldi	r24, 0x01	; 1
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	02 2e       	mov	r0, r18
     d92:	02 c0       	rjmp	.+4      	; 0xd98 <GPIO_writePin+0x8c>
     d94:	88 0f       	add	r24, r24
     d96:	99 1f       	adc	r25, r25
     d98:	0a 94       	dec	r0
     d9a:	e2 f7       	brpl	.-8      	; 0xd94 <GPIO_writePin+0x88>
     d9c:	84 2b       	or	r24, r20
     d9e:	8c 93       	st	X, r24
     da0:	98 c0       	rjmp	.+304    	; 0xed2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
     da2:	ab e3       	ldi	r26, 0x3B	; 59
     da4:	b0 e0       	ldi	r27, 0x00	; 0
     da6:	eb e3       	ldi	r30, 0x3B	; 59
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	80 81       	ld	r24, Z
     dac:	48 2f       	mov	r20, r24
     dae:	8a 81       	ldd	r24, Y+2	; 0x02
     db0:	28 2f       	mov	r18, r24
     db2:	30 e0       	ldi	r19, 0x00	; 0
     db4:	81 e0       	ldi	r24, 0x01	; 1
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	02 2e       	mov	r0, r18
     dba:	02 c0       	rjmp	.+4      	; 0xdc0 <GPIO_writePin+0xb4>
     dbc:	88 0f       	add	r24, r24
     dbe:	99 1f       	adc	r25, r25
     dc0:	0a 94       	dec	r0
     dc2:	e2 f7       	brpl	.-8      	; 0xdbc <GPIO_writePin+0xb0>
     dc4:	80 95       	com	r24
     dc6:	84 23       	and	r24, r20
     dc8:	8c 93       	st	X, r24
     dca:	83 c0       	rjmp	.+262    	; 0xed2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
     dcc:	8b 81       	ldd	r24, Y+3	; 0x03
     dce:	81 30       	cpi	r24, 0x01	; 1
     dd0:	a1 f4       	brne	.+40     	; 0xdfa <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
     dd2:	a8 e3       	ldi	r26, 0x38	; 56
     dd4:	b0 e0       	ldi	r27, 0x00	; 0
     dd6:	e8 e3       	ldi	r30, 0x38	; 56
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	80 81       	ld	r24, Z
     ddc:	48 2f       	mov	r20, r24
     dde:	8a 81       	ldd	r24, Y+2	; 0x02
     de0:	28 2f       	mov	r18, r24
     de2:	30 e0       	ldi	r19, 0x00	; 0
     de4:	81 e0       	ldi	r24, 0x01	; 1
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	02 2e       	mov	r0, r18
     dea:	02 c0       	rjmp	.+4      	; 0xdf0 <GPIO_writePin+0xe4>
     dec:	88 0f       	add	r24, r24
     dee:	99 1f       	adc	r25, r25
     df0:	0a 94       	dec	r0
     df2:	e2 f7       	brpl	.-8      	; 0xdec <GPIO_writePin+0xe0>
     df4:	84 2b       	or	r24, r20
     df6:	8c 93       	st	X, r24
     df8:	6c c0       	rjmp	.+216    	; 0xed2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
     dfa:	a8 e3       	ldi	r26, 0x38	; 56
     dfc:	b0 e0       	ldi	r27, 0x00	; 0
     dfe:	e8 e3       	ldi	r30, 0x38	; 56
     e00:	f0 e0       	ldi	r31, 0x00	; 0
     e02:	80 81       	ld	r24, Z
     e04:	48 2f       	mov	r20, r24
     e06:	8a 81       	ldd	r24, Y+2	; 0x02
     e08:	28 2f       	mov	r18, r24
     e0a:	30 e0       	ldi	r19, 0x00	; 0
     e0c:	81 e0       	ldi	r24, 0x01	; 1
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	02 2e       	mov	r0, r18
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <GPIO_writePin+0x10c>
     e14:	88 0f       	add	r24, r24
     e16:	99 1f       	adc	r25, r25
     e18:	0a 94       	dec	r0
     e1a:	e2 f7       	brpl	.-8      	; 0xe14 <GPIO_writePin+0x108>
     e1c:	80 95       	com	r24
     e1e:	84 23       	and	r24, r20
     e20:	8c 93       	st	X, r24
     e22:	57 c0       	rjmp	.+174    	; 0xed2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
     e24:	8b 81       	ldd	r24, Y+3	; 0x03
     e26:	81 30       	cpi	r24, 0x01	; 1
     e28:	a1 f4       	brne	.+40     	; 0xe52 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
     e2a:	a5 e3       	ldi	r26, 0x35	; 53
     e2c:	b0 e0       	ldi	r27, 0x00	; 0
     e2e:	e5 e3       	ldi	r30, 0x35	; 53
     e30:	f0 e0       	ldi	r31, 0x00	; 0
     e32:	80 81       	ld	r24, Z
     e34:	48 2f       	mov	r20, r24
     e36:	8a 81       	ldd	r24, Y+2	; 0x02
     e38:	28 2f       	mov	r18, r24
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	81 e0       	ldi	r24, 0x01	; 1
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	02 2e       	mov	r0, r18
     e42:	02 c0       	rjmp	.+4      	; 0xe48 <GPIO_writePin+0x13c>
     e44:	88 0f       	add	r24, r24
     e46:	99 1f       	adc	r25, r25
     e48:	0a 94       	dec	r0
     e4a:	e2 f7       	brpl	.-8      	; 0xe44 <GPIO_writePin+0x138>
     e4c:	84 2b       	or	r24, r20
     e4e:	8c 93       	st	X, r24
     e50:	40 c0       	rjmp	.+128    	; 0xed2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
     e52:	a5 e3       	ldi	r26, 0x35	; 53
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	e5 e3       	ldi	r30, 0x35	; 53
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	48 2f       	mov	r20, r24
     e5e:	8a 81       	ldd	r24, Y+2	; 0x02
     e60:	28 2f       	mov	r18, r24
     e62:	30 e0       	ldi	r19, 0x00	; 0
     e64:	81 e0       	ldi	r24, 0x01	; 1
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	02 2e       	mov	r0, r18
     e6a:	02 c0       	rjmp	.+4      	; 0xe70 <GPIO_writePin+0x164>
     e6c:	88 0f       	add	r24, r24
     e6e:	99 1f       	adc	r25, r25
     e70:	0a 94       	dec	r0
     e72:	e2 f7       	brpl	.-8      	; 0xe6c <GPIO_writePin+0x160>
     e74:	80 95       	com	r24
     e76:	84 23       	and	r24, r20
     e78:	8c 93       	st	X, r24
     e7a:	2b c0       	rjmp	.+86     	; 0xed2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
     e7c:	8b 81       	ldd	r24, Y+3	; 0x03
     e7e:	81 30       	cpi	r24, 0x01	; 1
     e80:	a1 f4       	brne	.+40     	; 0xeaa <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
     e82:	a2 e3       	ldi	r26, 0x32	; 50
     e84:	b0 e0       	ldi	r27, 0x00	; 0
     e86:	e2 e3       	ldi	r30, 0x32	; 50
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	80 81       	ld	r24, Z
     e8c:	48 2f       	mov	r20, r24
     e8e:	8a 81       	ldd	r24, Y+2	; 0x02
     e90:	28 2f       	mov	r18, r24
     e92:	30 e0       	ldi	r19, 0x00	; 0
     e94:	81 e0       	ldi	r24, 0x01	; 1
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	02 2e       	mov	r0, r18
     e9a:	02 c0       	rjmp	.+4      	; 0xea0 <GPIO_writePin+0x194>
     e9c:	88 0f       	add	r24, r24
     e9e:	99 1f       	adc	r25, r25
     ea0:	0a 94       	dec	r0
     ea2:	e2 f7       	brpl	.-8      	; 0xe9c <GPIO_writePin+0x190>
     ea4:	84 2b       	or	r24, r20
     ea6:	8c 93       	st	X, r24
     ea8:	14 c0       	rjmp	.+40     	; 0xed2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
     eaa:	a2 e3       	ldi	r26, 0x32	; 50
     eac:	b0 e0       	ldi	r27, 0x00	; 0
     eae:	e2 e3       	ldi	r30, 0x32	; 50
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	80 81       	ld	r24, Z
     eb4:	48 2f       	mov	r20, r24
     eb6:	8a 81       	ldd	r24, Y+2	; 0x02
     eb8:	28 2f       	mov	r18, r24
     eba:	30 e0       	ldi	r19, 0x00	; 0
     ebc:	81 e0       	ldi	r24, 0x01	; 1
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	02 2e       	mov	r0, r18
     ec2:	02 c0       	rjmp	.+4      	; 0xec8 <GPIO_writePin+0x1bc>
     ec4:	88 0f       	add	r24, r24
     ec6:	99 1f       	adc	r25, r25
     ec8:	0a 94       	dec	r0
     eca:	e2 f7       	brpl	.-8      	; 0xec4 <GPIO_writePin+0x1b8>
     ecc:	80 95       	com	r24
     ece:	84 23       	and	r24, r20
     ed0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     ed2:	0f 90       	pop	r0
     ed4:	0f 90       	pop	r0
     ed6:	0f 90       	pop	r0
     ed8:	0f 90       	pop	r0
     eda:	0f 90       	pop	r0
     edc:	cf 91       	pop	r28
     ede:	df 91       	pop	r29
     ee0:	08 95       	ret

00000ee2 <GPIO_readPin>:


uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
     ee2:	df 93       	push	r29
     ee4:	cf 93       	push	r28
     ee6:	00 d0       	rcall	.+0      	; 0xee8 <GPIO_readPin+0x6>
     ee8:	00 d0       	rcall	.+0      	; 0xeea <GPIO_readPin+0x8>
     eea:	0f 92       	push	r0
     eec:	cd b7       	in	r28, 0x3d	; 61
     eee:	de b7       	in	r29, 0x3e	; 62
     ef0:	8a 83       	std	Y+2, r24	; 0x02
     ef2:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
     ef4:	19 82       	std	Y+1, r1	; 0x01


	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     ef6:	8b 81       	ldd	r24, Y+3	; 0x03
     ef8:	88 30       	cpi	r24, 0x08	; 8
     efa:	08 f0       	brcs	.+2      	; 0xefe <GPIO_readPin+0x1c>
     efc:	84 c0       	rjmp	.+264    	; 0x1006 <GPIO_readPin+0x124>
     efe:	8a 81       	ldd	r24, Y+2	; 0x02
     f00:	84 30       	cpi	r24, 0x04	; 4
     f02:	08 f0       	brcs	.+2      	; 0xf06 <GPIO_readPin+0x24>
     f04:	80 c0       	rjmp	.+256    	; 0x1006 <GPIO_readPin+0x124>
	{
	}
	else
	{
		switch(port_num)
     f06:	8a 81       	ldd	r24, Y+2	; 0x02
     f08:	28 2f       	mov	r18, r24
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	3d 83       	std	Y+5, r19	; 0x05
     f0e:	2c 83       	std	Y+4, r18	; 0x04
     f10:	4c 81       	ldd	r20, Y+4	; 0x04
     f12:	5d 81       	ldd	r21, Y+5	; 0x05
     f14:	41 30       	cpi	r20, 0x01	; 1
     f16:	51 05       	cpc	r21, r1
     f18:	79 f1       	breq	.+94     	; 0xf78 <GPIO_readPin+0x96>
     f1a:	8c 81       	ldd	r24, Y+4	; 0x04
     f1c:	9d 81       	ldd	r25, Y+5	; 0x05
     f1e:	82 30       	cpi	r24, 0x02	; 2
     f20:	91 05       	cpc	r25, r1
     f22:	34 f4       	brge	.+12     	; 0xf30 <GPIO_readPin+0x4e>
     f24:	2c 81       	ldd	r18, Y+4	; 0x04
     f26:	3d 81       	ldd	r19, Y+5	; 0x05
     f28:	21 15       	cp	r18, r1
     f2a:	31 05       	cpc	r19, r1
     f2c:	69 f0       	breq	.+26     	; 0xf48 <GPIO_readPin+0x66>
     f2e:	6b c0       	rjmp	.+214    	; 0x1006 <GPIO_readPin+0x124>
     f30:	4c 81       	ldd	r20, Y+4	; 0x04
     f32:	5d 81       	ldd	r21, Y+5	; 0x05
     f34:	42 30       	cpi	r20, 0x02	; 2
     f36:	51 05       	cpc	r21, r1
     f38:	b9 f1       	breq	.+110    	; 0xfa8 <GPIO_readPin+0xc6>
     f3a:	8c 81       	ldd	r24, Y+4	; 0x04
     f3c:	9d 81       	ldd	r25, Y+5	; 0x05
     f3e:	83 30       	cpi	r24, 0x03	; 3
     f40:	91 05       	cpc	r25, r1
     f42:	09 f4       	brne	.+2      	; 0xf46 <GPIO_readPin+0x64>
     f44:	49 c0       	rjmp	.+146    	; 0xfd8 <GPIO_readPin+0xf6>
     f46:	5f c0       	rjmp	.+190    	; 0x1006 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
     f48:	e9 e3       	ldi	r30, 0x39	; 57
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 81       	ld	r24, Z
     f4e:	28 2f       	mov	r18, r24
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	8b 81       	ldd	r24, Y+3	; 0x03
     f54:	88 2f       	mov	r24, r24
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	a9 01       	movw	r20, r18
     f5a:	02 c0       	rjmp	.+4      	; 0xf60 <GPIO_readPin+0x7e>
     f5c:	55 95       	asr	r21
     f5e:	47 95       	ror	r20
     f60:	8a 95       	dec	r24
     f62:	e2 f7       	brpl	.-8      	; 0xf5c <GPIO_readPin+0x7a>
     f64:	ca 01       	movw	r24, r20
     f66:	81 70       	andi	r24, 0x01	; 1
     f68:	90 70       	andi	r25, 0x00	; 0
     f6a:	88 23       	and	r24, r24
     f6c:	19 f0       	breq	.+6      	; 0xf74 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
     f6e:	81 e0       	ldi	r24, 0x01	; 1
     f70:	89 83       	std	Y+1, r24	; 0x01
     f72:	49 c0       	rjmp	.+146    	; 0x1006 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     f74:	19 82       	std	Y+1, r1	; 0x01
     f76:	47 c0       	rjmp	.+142    	; 0x1006 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
     f78:	e6 e3       	ldi	r30, 0x36	; 54
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	80 81       	ld	r24, Z
     f7e:	28 2f       	mov	r18, r24
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	8b 81       	ldd	r24, Y+3	; 0x03
     f84:	88 2f       	mov	r24, r24
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	a9 01       	movw	r20, r18
     f8a:	02 c0       	rjmp	.+4      	; 0xf90 <GPIO_readPin+0xae>
     f8c:	55 95       	asr	r21
     f8e:	47 95       	ror	r20
     f90:	8a 95       	dec	r24
     f92:	e2 f7       	brpl	.-8      	; 0xf8c <GPIO_readPin+0xaa>
     f94:	ca 01       	movw	r24, r20
     f96:	81 70       	andi	r24, 0x01	; 1
     f98:	90 70       	andi	r25, 0x00	; 0
     f9a:	88 23       	and	r24, r24
     f9c:	19 f0       	breq	.+6      	; 0xfa4 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	89 83       	std	Y+1, r24	; 0x01
     fa2:	31 c0       	rjmp	.+98     	; 0x1006 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     fa4:	19 82       	std	Y+1, r1	; 0x01
     fa6:	2f c0       	rjmp	.+94     	; 0x1006 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
     fa8:	e3 e3       	ldi	r30, 0x33	; 51
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	80 81       	ld	r24, Z
     fae:	28 2f       	mov	r18, r24
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	8b 81       	ldd	r24, Y+3	; 0x03
     fb4:	88 2f       	mov	r24, r24
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	a9 01       	movw	r20, r18
     fba:	02 c0       	rjmp	.+4      	; 0xfc0 <GPIO_readPin+0xde>
     fbc:	55 95       	asr	r21
     fbe:	47 95       	ror	r20
     fc0:	8a 95       	dec	r24
     fc2:	e2 f7       	brpl	.-8      	; 0xfbc <GPIO_readPin+0xda>
     fc4:	ca 01       	movw	r24, r20
     fc6:	81 70       	andi	r24, 0x01	; 1
     fc8:	90 70       	andi	r25, 0x00	; 0
     fca:	88 23       	and	r24, r24
     fcc:	19 f0       	breq	.+6      	; 0xfd4 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
     fce:	81 e0       	ldi	r24, 0x01	; 1
     fd0:	89 83       	std	Y+1, r24	; 0x01
     fd2:	19 c0       	rjmp	.+50     	; 0x1006 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     fd4:	19 82       	std	Y+1, r1	; 0x01
     fd6:	17 c0       	rjmp	.+46     	; 0x1006 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
     fd8:	e0 e3       	ldi	r30, 0x30	; 48
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	80 81       	ld	r24, Z
     fde:	28 2f       	mov	r18, r24
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	8b 81       	ldd	r24, Y+3	; 0x03
     fe4:	88 2f       	mov	r24, r24
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	a9 01       	movw	r20, r18
     fea:	02 c0       	rjmp	.+4      	; 0xff0 <GPIO_readPin+0x10e>
     fec:	55 95       	asr	r21
     fee:	47 95       	ror	r20
     ff0:	8a 95       	dec	r24
     ff2:	e2 f7       	brpl	.-8      	; 0xfec <GPIO_readPin+0x10a>
     ff4:	ca 01       	movw	r24, r20
     ff6:	81 70       	andi	r24, 0x01	; 1
     ff8:	90 70       	andi	r25, 0x00	; 0
     ffa:	88 23       	and	r24, r24
     ffc:	19 f0       	breq	.+6      	; 0x1004 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
     ffe:	81 e0       	ldi	r24, 0x01	; 1
    1000:	89 83       	std	Y+1, r24	; 0x01
    1002:	01 c0       	rjmp	.+2      	; 0x1006 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1004:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1006:	89 81       	ldd	r24, Y+1	; 0x01
}
    1008:	0f 90       	pop	r0
    100a:	0f 90       	pop	r0
    100c:	0f 90       	pop	r0
    100e:	0f 90       	pop	r0
    1010:	0f 90       	pop	r0
    1012:	cf 91       	pop	r28
    1014:	df 91       	pop	r29
    1016:	08 95       	ret

00001018 <GPIO_setupPortDirection>:


void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1018:	df 93       	push	r29
    101a:	cf 93       	push	r28
    101c:	00 d0       	rcall	.+0      	; 0x101e <GPIO_setupPortDirection+0x6>
    101e:	00 d0       	rcall	.+0      	; 0x1020 <GPIO_setupPortDirection+0x8>
    1020:	cd b7       	in	r28, 0x3d	; 61
    1022:	de b7       	in	r29, 0x3e	; 62
    1024:	89 83       	std	Y+1, r24	; 0x01
    1026:	6a 83       	std	Y+2, r22	; 0x02

	if(port_num >= NUM_OF_PORTS)
    1028:	89 81       	ldd	r24, Y+1	; 0x01
    102a:	84 30       	cpi	r24, 0x04	; 4
    102c:	90 f5       	brcc	.+100    	; 0x1092 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    102e:	89 81       	ldd	r24, Y+1	; 0x01
    1030:	28 2f       	mov	r18, r24
    1032:	30 e0       	ldi	r19, 0x00	; 0
    1034:	3c 83       	std	Y+4, r19	; 0x04
    1036:	2b 83       	std	Y+3, r18	; 0x03
    1038:	8b 81       	ldd	r24, Y+3	; 0x03
    103a:	9c 81       	ldd	r25, Y+4	; 0x04
    103c:	81 30       	cpi	r24, 0x01	; 1
    103e:	91 05       	cpc	r25, r1
    1040:	d1 f0       	breq	.+52     	; 0x1076 <GPIO_setupPortDirection+0x5e>
    1042:	2b 81       	ldd	r18, Y+3	; 0x03
    1044:	3c 81       	ldd	r19, Y+4	; 0x04
    1046:	22 30       	cpi	r18, 0x02	; 2
    1048:	31 05       	cpc	r19, r1
    104a:	2c f4       	brge	.+10     	; 0x1056 <GPIO_setupPortDirection+0x3e>
    104c:	8b 81       	ldd	r24, Y+3	; 0x03
    104e:	9c 81       	ldd	r25, Y+4	; 0x04
    1050:	00 97       	sbiw	r24, 0x00	; 0
    1052:	61 f0       	breq	.+24     	; 0x106c <GPIO_setupPortDirection+0x54>
    1054:	1e c0       	rjmp	.+60     	; 0x1092 <GPIO_setupPortDirection+0x7a>
    1056:	2b 81       	ldd	r18, Y+3	; 0x03
    1058:	3c 81       	ldd	r19, Y+4	; 0x04
    105a:	22 30       	cpi	r18, 0x02	; 2
    105c:	31 05       	cpc	r19, r1
    105e:	81 f0       	breq	.+32     	; 0x1080 <GPIO_setupPortDirection+0x68>
    1060:	8b 81       	ldd	r24, Y+3	; 0x03
    1062:	9c 81       	ldd	r25, Y+4	; 0x04
    1064:	83 30       	cpi	r24, 0x03	; 3
    1066:	91 05       	cpc	r25, r1
    1068:	81 f0       	breq	.+32     	; 0x108a <GPIO_setupPortDirection+0x72>
    106a:	13 c0       	rjmp	.+38     	; 0x1092 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    106c:	ea e3       	ldi	r30, 0x3A	; 58
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	8a 81       	ldd	r24, Y+2	; 0x02
    1072:	80 83       	st	Z, r24
    1074:	0e c0       	rjmp	.+28     	; 0x1092 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1076:	e7 e3       	ldi	r30, 0x37	; 55
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	8a 81       	ldd	r24, Y+2	; 0x02
    107c:	80 83       	st	Z, r24
    107e:	09 c0       	rjmp	.+18     	; 0x1092 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1080:	e4 e3       	ldi	r30, 0x34	; 52
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	8a 81       	ldd	r24, Y+2	; 0x02
    1086:	80 83       	st	Z, r24
    1088:	04 c0       	rjmp	.+8      	; 0x1092 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    108a:	e1 e3       	ldi	r30, 0x31	; 49
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	8a 81       	ldd	r24, Y+2	; 0x02
    1090:	80 83       	st	Z, r24
			break;
		}
	}
}
    1092:	0f 90       	pop	r0
    1094:	0f 90       	pop	r0
    1096:	0f 90       	pop	r0
    1098:	0f 90       	pop	r0
    109a:	cf 91       	pop	r28
    109c:	df 91       	pop	r29
    109e:	08 95       	ret

000010a0 <GPIO_writePort>:


void GPIO_writePort(uint8 port_num, uint8 value)
{
    10a0:	df 93       	push	r29
    10a2:	cf 93       	push	r28
    10a4:	00 d0       	rcall	.+0      	; 0x10a6 <GPIO_writePort+0x6>
    10a6:	00 d0       	rcall	.+0      	; 0x10a8 <GPIO_writePort+0x8>
    10a8:	cd b7       	in	r28, 0x3d	; 61
    10aa:	de b7       	in	r29, 0x3e	; 62
    10ac:	89 83       	std	Y+1, r24	; 0x01
    10ae:	6a 83       	std	Y+2, r22	; 0x02

	if(port_num >= NUM_OF_PORTS)
    10b0:	89 81       	ldd	r24, Y+1	; 0x01
    10b2:	84 30       	cpi	r24, 0x04	; 4
    10b4:	90 f5       	brcc	.+100    	; 0x111a <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    10b6:	89 81       	ldd	r24, Y+1	; 0x01
    10b8:	28 2f       	mov	r18, r24
    10ba:	30 e0       	ldi	r19, 0x00	; 0
    10bc:	3c 83       	std	Y+4, r19	; 0x04
    10be:	2b 83       	std	Y+3, r18	; 0x03
    10c0:	8b 81       	ldd	r24, Y+3	; 0x03
    10c2:	9c 81       	ldd	r25, Y+4	; 0x04
    10c4:	81 30       	cpi	r24, 0x01	; 1
    10c6:	91 05       	cpc	r25, r1
    10c8:	d1 f0       	breq	.+52     	; 0x10fe <GPIO_writePort+0x5e>
    10ca:	2b 81       	ldd	r18, Y+3	; 0x03
    10cc:	3c 81       	ldd	r19, Y+4	; 0x04
    10ce:	22 30       	cpi	r18, 0x02	; 2
    10d0:	31 05       	cpc	r19, r1
    10d2:	2c f4       	brge	.+10     	; 0x10de <GPIO_writePort+0x3e>
    10d4:	8b 81       	ldd	r24, Y+3	; 0x03
    10d6:	9c 81       	ldd	r25, Y+4	; 0x04
    10d8:	00 97       	sbiw	r24, 0x00	; 0
    10da:	61 f0       	breq	.+24     	; 0x10f4 <GPIO_writePort+0x54>
    10dc:	1e c0       	rjmp	.+60     	; 0x111a <GPIO_writePort+0x7a>
    10de:	2b 81       	ldd	r18, Y+3	; 0x03
    10e0:	3c 81       	ldd	r19, Y+4	; 0x04
    10e2:	22 30       	cpi	r18, 0x02	; 2
    10e4:	31 05       	cpc	r19, r1
    10e6:	81 f0       	breq	.+32     	; 0x1108 <GPIO_writePort+0x68>
    10e8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ea:	9c 81       	ldd	r25, Y+4	; 0x04
    10ec:	83 30       	cpi	r24, 0x03	; 3
    10ee:	91 05       	cpc	r25, r1
    10f0:	81 f0       	breq	.+32     	; 0x1112 <GPIO_writePort+0x72>
    10f2:	13 c0       	rjmp	.+38     	; 0x111a <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    10f4:	eb e3       	ldi	r30, 0x3B	; 59
    10f6:	f0 e0       	ldi	r31, 0x00	; 0
    10f8:	8a 81       	ldd	r24, Y+2	; 0x02
    10fa:	80 83       	st	Z, r24
    10fc:	0e c0       	rjmp	.+28     	; 0x111a <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    10fe:	e8 e3       	ldi	r30, 0x38	; 56
    1100:	f0 e0       	ldi	r31, 0x00	; 0
    1102:	8a 81       	ldd	r24, Y+2	; 0x02
    1104:	80 83       	st	Z, r24
    1106:	09 c0       	rjmp	.+18     	; 0x111a <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1108:	e5 e3       	ldi	r30, 0x35	; 53
    110a:	f0 e0       	ldi	r31, 0x00	; 0
    110c:	8a 81       	ldd	r24, Y+2	; 0x02
    110e:	80 83       	st	Z, r24
    1110:	04 c0       	rjmp	.+8      	; 0x111a <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1112:	e2 e3       	ldi	r30, 0x32	; 50
    1114:	f0 e0       	ldi	r31, 0x00	; 0
    1116:	8a 81       	ldd	r24, Y+2	; 0x02
    1118:	80 83       	st	Z, r24
			break;
		}
	}
}
    111a:	0f 90       	pop	r0
    111c:	0f 90       	pop	r0
    111e:	0f 90       	pop	r0
    1120:	0f 90       	pop	r0
    1122:	cf 91       	pop	r28
    1124:	df 91       	pop	r29
    1126:	08 95       	ret

00001128 <GPIO_readPort>:


uint8 GPIO_readPort(uint8 port_num)
{
    1128:	df 93       	push	r29
    112a:	cf 93       	push	r28
    112c:	00 d0       	rcall	.+0      	; 0x112e <GPIO_readPort+0x6>
    112e:	00 d0       	rcall	.+0      	; 0x1130 <GPIO_readPort+0x8>
    1130:	cd b7       	in	r28, 0x3d	; 61
    1132:	de b7       	in	r29, 0x3e	; 62
    1134:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1136:	19 82       	std	Y+1, r1	; 0x01


	if(port_num >= NUM_OF_PORTS)
    1138:	8a 81       	ldd	r24, Y+2	; 0x02
    113a:	84 30       	cpi	r24, 0x04	; 4
    113c:	90 f5       	brcc	.+100    	; 0x11a2 <GPIO_readPort+0x7a>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
    113e:	8a 81       	ldd	r24, Y+2	; 0x02
    1140:	28 2f       	mov	r18, r24
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	3c 83       	std	Y+4, r19	; 0x04
    1146:	2b 83       	std	Y+3, r18	; 0x03
    1148:	8b 81       	ldd	r24, Y+3	; 0x03
    114a:	9c 81       	ldd	r25, Y+4	; 0x04
    114c:	81 30       	cpi	r24, 0x01	; 1
    114e:	91 05       	cpc	r25, r1
    1150:	d1 f0       	breq	.+52     	; 0x1186 <GPIO_readPort+0x5e>
    1152:	2b 81       	ldd	r18, Y+3	; 0x03
    1154:	3c 81       	ldd	r19, Y+4	; 0x04
    1156:	22 30       	cpi	r18, 0x02	; 2
    1158:	31 05       	cpc	r19, r1
    115a:	2c f4       	brge	.+10     	; 0x1166 <GPIO_readPort+0x3e>
    115c:	8b 81       	ldd	r24, Y+3	; 0x03
    115e:	9c 81       	ldd	r25, Y+4	; 0x04
    1160:	00 97       	sbiw	r24, 0x00	; 0
    1162:	61 f0       	breq	.+24     	; 0x117c <GPIO_readPort+0x54>
    1164:	1e c0       	rjmp	.+60     	; 0x11a2 <GPIO_readPort+0x7a>
    1166:	2b 81       	ldd	r18, Y+3	; 0x03
    1168:	3c 81       	ldd	r19, Y+4	; 0x04
    116a:	22 30       	cpi	r18, 0x02	; 2
    116c:	31 05       	cpc	r19, r1
    116e:	81 f0       	breq	.+32     	; 0x1190 <GPIO_readPort+0x68>
    1170:	8b 81       	ldd	r24, Y+3	; 0x03
    1172:	9c 81       	ldd	r25, Y+4	; 0x04
    1174:	83 30       	cpi	r24, 0x03	; 3
    1176:	91 05       	cpc	r25, r1
    1178:	81 f0       	breq	.+32     	; 0x119a <GPIO_readPort+0x72>
    117a:	13 c0       	rjmp	.+38     	; 0x11a2 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    117c:	e9 e3       	ldi	r30, 0x39	; 57
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	80 81       	ld	r24, Z
    1182:	89 83       	std	Y+1, r24	; 0x01
    1184:	0e c0       	rjmp	.+28     	; 0x11a2 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1186:	e6 e3       	ldi	r30, 0x36	; 54
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	80 81       	ld	r24, Z
    118c:	89 83       	std	Y+1, r24	; 0x01
    118e:	09 c0       	rjmp	.+18     	; 0x11a2 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1190:	e3 e3       	ldi	r30, 0x33	; 51
    1192:	f0 e0       	ldi	r31, 0x00	; 0
    1194:	80 81       	ld	r24, Z
    1196:	89 83       	std	Y+1, r24	; 0x01
    1198:	04 c0       	rjmp	.+8      	; 0x11a2 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    119a:	e0 e3       	ldi	r30, 0x30	; 48
    119c:	f0 e0       	ldi	r31, 0x00	; 0
    119e:	80 81       	ld	r24, Z
    11a0:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    11a2:	89 81       	ldd	r24, Y+1	; 0x01
}
    11a4:	0f 90       	pop	r0
    11a6:	0f 90       	pop	r0
    11a8:	0f 90       	pop	r0
    11aa:	0f 90       	pop	r0
    11ac:	cf 91       	pop	r28
    11ae:	df 91       	pop	r29
    11b0:	08 95       	ret

000011b2 <LCD_init>:
#include "lcd.h"
#include "gpio.h"


void LCD_init(void)
{
    11b2:	df 93       	push	r29
    11b4:	cf 93       	push	r28
    11b6:	cd b7       	in	r28, 0x3d	; 61
    11b8:	de b7       	in	r29, 0x3e	; 62
    11ba:	2e 97       	sbiw	r28, 0x0e	; 14
    11bc:	0f b6       	in	r0, 0x3f	; 63
    11be:	f8 94       	cli
    11c0:	de bf       	out	0x3e, r29	; 62
    11c2:	0f be       	out	0x3f, r0	; 63
    11c4:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    11c6:	80 e0       	ldi	r24, 0x00	; 0
    11c8:	61 e0       	ldi	r22, 0x01	; 1
    11ca:	41 e0       	ldi	r20, 0x01	; 1
    11cc:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    11d0:	80 e0       	ldi	r24, 0x00	; 0
    11d2:	62 e0       	ldi	r22, 0x02	; 2
    11d4:	41 e0       	ldi	r20, 0x01	; 1
    11d6:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_setupPinDirection>
    11da:	80 e0       	ldi	r24, 0x00	; 0
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	a0 ea       	ldi	r26, 0xA0	; 160
    11e0:	b1 e4       	ldi	r27, 0x41	; 65
    11e2:	8b 87       	std	Y+11, r24	; 0x0b
    11e4:	9c 87       	std	Y+12, r25	; 0x0c
    11e6:	ad 87       	std	Y+13, r26	; 0x0d
    11e8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    11ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    11ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    11f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    11f2:	20 e0       	ldi	r18, 0x00	; 0
    11f4:	30 e0       	ldi	r19, 0x00	; 0
    11f6:	4a e7       	ldi	r20, 0x7A	; 122
    11f8:	53 e4       	ldi	r21, 0x43	; 67
    11fa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    11fe:	dc 01       	movw	r26, r24
    1200:	cb 01       	movw	r24, r22
    1202:	8f 83       	std	Y+7, r24	; 0x07
    1204:	98 87       	std	Y+8, r25	; 0x08
    1206:	a9 87       	std	Y+9, r26	; 0x09
    1208:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    120a:	6f 81       	ldd	r22, Y+7	; 0x07
    120c:	78 85       	ldd	r23, Y+8	; 0x08
    120e:	89 85       	ldd	r24, Y+9	; 0x09
    1210:	9a 85       	ldd	r25, Y+10	; 0x0a
    1212:	20 e0       	ldi	r18, 0x00	; 0
    1214:	30 e0       	ldi	r19, 0x00	; 0
    1216:	40 e8       	ldi	r20, 0x80	; 128
    1218:	5f e3       	ldi	r21, 0x3F	; 63
    121a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    121e:	88 23       	and	r24, r24
    1220:	2c f4       	brge	.+10     	; 0x122c <LCD_init+0x7a>
		__ticks = 1;
    1222:	81 e0       	ldi	r24, 0x01	; 1
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	9e 83       	std	Y+6, r25	; 0x06
    1228:	8d 83       	std	Y+5, r24	; 0x05
    122a:	3f c0       	rjmp	.+126    	; 0x12aa <LCD_init+0xf8>
	else if (__tmp > 65535)
    122c:	6f 81       	ldd	r22, Y+7	; 0x07
    122e:	78 85       	ldd	r23, Y+8	; 0x08
    1230:	89 85       	ldd	r24, Y+9	; 0x09
    1232:	9a 85       	ldd	r25, Y+10	; 0x0a
    1234:	20 e0       	ldi	r18, 0x00	; 0
    1236:	3f ef       	ldi	r19, 0xFF	; 255
    1238:	4f e7       	ldi	r20, 0x7F	; 127
    123a:	57 e4       	ldi	r21, 0x47	; 71
    123c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1240:	18 16       	cp	r1, r24
    1242:	4c f5       	brge	.+82     	; 0x1296 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1244:	6b 85       	ldd	r22, Y+11	; 0x0b
    1246:	7c 85       	ldd	r23, Y+12	; 0x0c
    1248:	8d 85       	ldd	r24, Y+13	; 0x0d
    124a:	9e 85       	ldd	r25, Y+14	; 0x0e
    124c:	20 e0       	ldi	r18, 0x00	; 0
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	40 e2       	ldi	r20, 0x20	; 32
    1252:	51 e4       	ldi	r21, 0x41	; 65
    1254:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1258:	dc 01       	movw	r26, r24
    125a:	cb 01       	movw	r24, r22
    125c:	bc 01       	movw	r22, r24
    125e:	cd 01       	movw	r24, r26
    1260:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1264:	dc 01       	movw	r26, r24
    1266:	cb 01       	movw	r24, r22
    1268:	9e 83       	std	Y+6, r25	; 0x06
    126a:	8d 83       	std	Y+5, r24	; 0x05
    126c:	0f c0       	rjmp	.+30     	; 0x128c <LCD_init+0xda>
    126e:	89 e1       	ldi	r24, 0x19	; 25
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	9c 83       	std	Y+4, r25	; 0x04
    1274:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1276:	8b 81       	ldd	r24, Y+3	; 0x03
    1278:	9c 81       	ldd	r25, Y+4	; 0x04
    127a:	01 97       	sbiw	r24, 0x01	; 1
    127c:	f1 f7       	brne	.-4      	; 0x127a <LCD_init+0xc8>
    127e:	9c 83       	std	Y+4, r25	; 0x04
    1280:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1282:	8d 81       	ldd	r24, Y+5	; 0x05
    1284:	9e 81       	ldd	r25, Y+6	; 0x06
    1286:	01 97       	sbiw	r24, 0x01	; 1
    1288:	9e 83       	std	Y+6, r25	; 0x06
    128a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    128c:	8d 81       	ldd	r24, Y+5	; 0x05
    128e:	9e 81       	ldd	r25, Y+6	; 0x06
    1290:	00 97       	sbiw	r24, 0x00	; 0
    1292:	69 f7       	brne	.-38     	; 0x126e <LCD_init+0xbc>
    1294:	14 c0       	rjmp	.+40     	; 0x12be <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1296:	6f 81       	ldd	r22, Y+7	; 0x07
    1298:	78 85       	ldd	r23, Y+8	; 0x08
    129a:	89 85       	ldd	r24, Y+9	; 0x09
    129c:	9a 85       	ldd	r25, Y+10	; 0x0a
    129e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    12a2:	dc 01       	movw	r26, r24
    12a4:	cb 01       	movw	r24, r22
    12a6:	9e 83       	std	Y+6, r25	; 0x06
    12a8:	8d 83       	std	Y+5, r24	; 0x05
    12aa:	8d 81       	ldd	r24, Y+5	; 0x05
    12ac:	9e 81       	ldd	r25, Y+6	; 0x06
    12ae:	9a 83       	std	Y+2, r25	; 0x02
    12b0:	89 83       	std	Y+1, r24	; 0x01
    12b2:	89 81       	ldd	r24, Y+1	; 0x01
    12b4:	9a 81       	ldd	r25, Y+2	; 0x02
    12b6:	01 97       	sbiw	r24, 0x01	; 1
    12b8:	f1 f7       	brne	.-4      	; 0x12b6 <LCD_init+0x104>
    12ba:	9a 83       	std	Y+2, r25	; 0x02
    12bc:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    12be:	80 e0       	ldi	r24, 0x00	; 0
    12c0:	63 e0       	ldi	r22, 0x03	; 3
    12c2:	41 e0       	ldi	r20, 0x01	; 1
    12c4:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    12c8:	80 e0       	ldi	r24, 0x00	; 0
    12ca:	64 e0       	ldi	r22, 0x04	; 4
    12cc:	41 e0       	ldi	r20, 0x01	; 1
    12ce:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    12d2:	80 e0       	ldi	r24, 0x00	; 0
    12d4:	65 e0       	ldi	r22, 0x05	; 5
    12d6:	41 e0       	ldi	r20, 0x01	; 1
    12d8:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    12dc:	80 e0       	ldi	r24, 0x00	; 0
    12de:	66 e0       	ldi	r22, 0x06	; 6
    12e0:	41 e0       	ldi	r20, 0x01	; 1
    12e2:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    12e6:	83 e3       	ldi	r24, 0x33	; 51
    12e8:	0e 94 8b 09 	call	0x1316	; 0x1316 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    12ec:	82 e3       	ldi	r24, 0x32	; 50
    12ee:	0e 94 8b 09 	call	0x1316	; 0x1316 <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    12f2:	88 e2       	ldi	r24, 0x28	; 40
    12f4:	0e 94 8b 09 	call	0x1316	; 0x1316 <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    12f8:	8c e0       	ldi	r24, 0x0C	; 12
    12fa:	0e 94 8b 09 	call	0x1316	; 0x1316 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    12fe:	81 e0       	ldi	r24, 0x01	; 1
    1300:	0e 94 8b 09 	call	0x1316	; 0x1316 <LCD_sendCommand>
}
    1304:	2e 96       	adiw	r28, 0x0e	; 14
    1306:	0f b6       	in	r0, 0x3f	; 63
    1308:	f8 94       	cli
    130a:	de bf       	out	0x3e, r29	; 62
    130c:	0f be       	out	0x3f, r0	; 63
    130e:	cd bf       	out	0x3d, r28	; 61
    1310:	cf 91       	pop	r28
    1312:	df 91       	pop	r29
    1314:	08 95       	ret

00001316 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1316:	0f 93       	push	r16
    1318:	1f 93       	push	r17
    131a:	df 93       	push	r29
    131c:	cf 93       	push	r28
    131e:	cd b7       	in	r28, 0x3d	; 61
    1320:	de b7       	in	r29, 0x3e	; 62
    1322:	c3 56       	subi	r28, 0x63	; 99
    1324:	d0 40       	sbci	r29, 0x00	; 0
    1326:	0f b6       	in	r0, 0x3f	; 63
    1328:	f8 94       	cli
    132a:	de bf       	out	0x3e, r29	; 62
    132c:	0f be       	out	0x3f, r0	; 63
    132e:	cd bf       	out	0x3d, r28	; 61
    1330:	fe 01       	movw	r30, r28
    1332:	ed 59       	subi	r30, 0x9D	; 157
    1334:	ff 4f       	sbci	r31, 0xFF	; 255
    1336:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1338:	80 e0       	ldi	r24, 0x00	; 0
    133a:	61 e0       	ldi	r22, 0x01	; 1
    133c:	40 e0       	ldi	r20, 0x00	; 0
    133e:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>
    1342:	fe 01       	movw	r30, r28
    1344:	e1 5a       	subi	r30, 0xA1	; 161
    1346:	ff 4f       	sbci	r31, 0xFF	; 255
    1348:	80 e0       	ldi	r24, 0x00	; 0
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	a0 e8       	ldi	r26, 0x80	; 128
    134e:	bf e3       	ldi	r27, 0x3F	; 63
    1350:	80 83       	st	Z, r24
    1352:	91 83       	std	Z+1, r25	; 0x01
    1354:	a2 83       	std	Z+2, r26	; 0x02
    1356:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1358:	8e 01       	movw	r16, r28
    135a:	05 5a       	subi	r16, 0xA5	; 165
    135c:	1f 4f       	sbci	r17, 0xFF	; 255
    135e:	fe 01       	movw	r30, r28
    1360:	e1 5a       	subi	r30, 0xA1	; 161
    1362:	ff 4f       	sbci	r31, 0xFF	; 255
    1364:	60 81       	ld	r22, Z
    1366:	71 81       	ldd	r23, Z+1	; 0x01
    1368:	82 81       	ldd	r24, Z+2	; 0x02
    136a:	93 81       	ldd	r25, Z+3	; 0x03
    136c:	20 e0       	ldi	r18, 0x00	; 0
    136e:	30 e0       	ldi	r19, 0x00	; 0
    1370:	4a e7       	ldi	r20, 0x7A	; 122
    1372:	53 e4       	ldi	r21, 0x43	; 67
    1374:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1378:	dc 01       	movw	r26, r24
    137a:	cb 01       	movw	r24, r22
    137c:	f8 01       	movw	r30, r16
    137e:	80 83       	st	Z, r24
    1380:	91 83       	std	Z+1, r25	; 0x01
    1382:	a2 83       	std	Z+2, r26	; 0x02
    1384:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1386:	fe 01       	movw	r30, r28
    1388:	e5 5a       	subi	r30, 0xA5	; 165
    138a:	ff 4f       	sbci	r31, 0xFF	; 255
    138c:	60 81       	ld	r22, Z
    138e:	71 81       	ldd	r23, Z+1	; 0x01
    1390:	82 81       	ldd	r24, Z+2	; 0x02
    1392:	93 81       	ldd	r25, Z+3	; 0x03
    1394:	20 e0       	ldi	r18, 0x00	; 0
    1396:	30 e0       	ldi	r19, 0x00	; 0
    1398:	40 e8       	ldi	r20, 0x80	; 128
    139a:	5f e3       	ldi	r21, 0x3F	; 63
    139c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    13a0:	88 23       	and	r24, r24
    13a2:	44 f4       	brge	.+16     	; 0x13b4 <LCD_sendCommand+0x9e>
		__ticks = 1;
    13a4:	fe 01       	movw	r30, r28
    13a6:	e7 5a       	subi	r30, 0xA7	; 167
    13a8:	ff 4f       	sbci	r31, 0xFF	; 255
    13aa:	81 e0       	ldi	r24, 0x01	; 1
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	91 83       	std	Z+1, r25	; 0x01
    13b0:	80 83       	st	Z, r24
    13b2:	64 c0       	rjmp	.+200    	; 0x147c <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    13b4:	fe 01       	movw	r30, r28
    13b6:	e5 5a       	subi	r30, 0xA5	; 165
    13b8:	ff 4f       	sbci	r31, 0xFF	; 255
    13ba:	60 81       	ld	r22, Z
    13bc:	71 81       	ldd	r23, Z+1	; 0x01
    13be:	82 81       	ldd	r24, Z+2	; 0x02
    13c0:	93 81       	ldd	r25, Z+3	; 0x03
    13c2:	20 e0       	ldi	r18, 0x00	; 0
    13c4:	3f ef       	ldi	r19, 0xFF	; 255
    13c6:	4f e7       	ldi	r20, 0x7F	; 127
    13c8:	57 e4       	ldi	r21, 0x47	; 71
    13ca:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    13ce:	18 16       	cp	r1, r24
    13d0:	0c f0       	brlt	.+2      	; 0x13d4 <LCD_sendCommand+0xbe>
    13d2:	43 c0       	rjmp	.+134    	; 0x145a <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13d4:	fe 01       	movw	r30, r28
    13d6:	e1 5a       	subi	r30, 0xA1	; 161
    13d8:	ff 4f       	sbci	r31, 0xFF	; 255
    13da:	60 81       	ld	r22, Z
    13dc:	71 81       	ldd	r23, Z+1	; 0x01
    13de:	82 81       	ldd	r24, Z+2	; 0x02
    13e0:	93 81       	ldd	r25, Z+3	; 0x03
    13e2:	20 e0       	ldi	r18, 0x00	; 0
    13e4:	30 e0       	ldi	r19, 0x00	; 0
    13e6:	40 e2       	ldi	r20, 0x20	; 32
    13e8:	51 e4       	ldi	r21, 0x41	; 65
    13ea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13ee:	dc 01       	movw	r26, r24
    13f0:	cb 01       	movw	r24, r22
    13f2:	8e 01       	movw	r16, r28
    13f4:	07 5a       	subi	r16, 0xA7	; 167
    13f6:	1f 4f       	sbci	r17, 0xFF	; 255
    13f8:	bc 01       	movw	r22, r24
    13fa:	cd 01       	movw	r24, r26
    13fc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1400:	dc 01       	movw	r26, r24
    1402:	cb 01       	movw	r24, r22
    1404:	f8 01       	movw	r30, r16
    1406:	91 83       	std	Z+1, r25	; 0x01
    1408:	80 83       	st	Z, r24
    140a:	1f c0       	rjmp	.+62     	; 0x144a <LCD_sendCommand+0x134>
    140c:	fe 01       	movw	r30, r28
    140e:	e9 5a       	subi	r30, 0xA9	; 169
    1410:	ff 4f       	sbci	r31, 0xFF	; 255
    1412:	89 e1       	ldi	r24, 0x19	; 25
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	91 83       	std	Z+1, r25	; 0x01
    1418:	80 83       	st	Z, r24
    141a:	fe 01       	movw	r30, r28
    141c:	e9 5a       	subi	r30, 0xA9	; 169
    141e:	ff 4f       	sbci	r31, 0xFF	; 255
    1420:	80 81       	ld	r24, Z
    1422:	91 81       	ldd	r25, Z+1	; 0x01
    1424:	01 97       	sbiw	r24, 0x01	; 1
    1426:	f1 f7       	brne	.-4      	; 0x1424 <LCD_sendCommand+0x10e>
    1428:	fe 01       	movw	r30, r28
    142a:	e9 5a       	subi	r30, 0xA9	; 169
    142c:	ff 4f       	sbci	r31, 0xFF	; 255
    142e:	91 83       	std	Z+1, r25	; 0x01
    1430:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1432:	de 01       	movw	r26, r28
    1434:	a7 5a       	subi	r26, 0xA7	; 167
    1436:	bf 4f       	sbci	r27, 0xFF	; 255
    1438:	fe 01       	movw	r30, r28
    143a:	e7 5a       	subi	r30, 0xA7	; 167
    143c:	ff 4f       	sbci	r31, 0xFF	; 255
    143e:	80 81       	ld	r24, Z
    1440:	91 81       	ldd	r25, Z+1	; 0x01
    1442:	01 97       	sbiw	r24, 0x01	; 1
    1444:	11 96       	adiw	r26, 0x01	; 1
    1446:	9c 93       	st	X, r25
    1448:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    144a:	fe 01       	movw	r30, r28
    144c:	e7 5a       	subi	r30, 0xA7	; 167
    144e:	ff 4f       	sbci	r31, 0xFF	; 255
    1450:	80 81       	ld	r24, Z
    1452:	91 81       	ldd	r25, Z+1	; 0x01
    1454:	00 97       	sbiw	r24, 0x00	; 0
    1456:	d1 f6       	brne	.-76     	; 0x140c <LCD_sendCommand+0xf6>
    1458:	27 c0       	rjmp	.+78     	; 0x14a8 <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    145a:	8e 01       	movw	r16, r28
    145c:	07 5a       	subi	r16, 0xA7	; 167
    145e:	1f 4f       	sbci	r17, 0xFF	; 255
    1460:	fe 01       	movw	r30, r28
    1462:	e5 5a       	subi	r30, 0xA5	; 165
    1464:	ff 4f       	sbci	r31, 0xFF	; 255
    1466:	60 81       	ld	r22, Z
    1468:	71 81       	ldd	r23, Z+1	; 0x01
    146a:	82 81       	ldd	r24, Z+2	; 0x02
    146c:	93 81       	ldd	r25, Z+3	; 0x03
    146e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1472:	dc 01       	movw	r26, r24
    1474:	cb 01       	movw	r24, r22
    1476:	f8 01       	movw	r30, r16
    1478:	91 83       	std	Z+1, r25	; 0x01
    147a:	80 83       	st	Z, r24
    147c:	de 01       	movw	r26, r28
    147e:	ab 5a       	subi	r26, 0xAB	; 171
    1480:	bf 4f       	sbci	r27, 0xFF	; 255
    1482:	fe 01       	movw	r30, r28
    1484:	e7 5a       	subi	r30, 0xA7	; 167
    1486:	ff 4f       	sbci	r31, 0xFF	; 255
    1488:	80 81       	ld	r24, Z
    148a:	91 81       	ldd	r25, Z+1	; 0x01
    148c:	8d 93       	st	X+, r24
    148e:	9c 93       	st	X, r25
    1490:	fe 01       	movw	r30, r28
    1492:	eb 5a       	subi	r30, 0xAB	; 171
    1494:	ff 4f       	sbci	r31, 0xFF	; 255
    1496:	80 81       	ld	r24, Z
    1498:	91 81       	ldd	r25, Z+1	; 0x01
    149a:	01 97       	sbiw	r24, 0x01	; 1
    149c:	f1 f7       	brne	.-4      	; 0x149a <LCD_sendCommand+0x184>
    149e:	fe 01       	movw	r30, r28
    14a0:	eb 5a       	subi	r30, 0xAB	; 171
    14a2:	ff 4f       	sbci	r31, 0xFF	; 255
    14a4:	91 83       	std	Z+1, r25	; 0x01
    14a6:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    14a8:	80 e0       	ldi	r24, 0x00	; 0
    14aa:	62 e0       	ldi	r22, 0x02	; 2
    14ac:	41 e0       	ldi	r20, 0x01	; 1
    14ae:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>
    14b2:	fe 01       	movw	r30, r28
    14b4:	ef 5a       	subi	r30, 0xAF	; 175
    14b6:	ff 4f       	sbci	r31, 0xFF	; 255
    14b8:	80 e0       	ldi	r24, 0x00	; 0
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	a0 e8       	ldi	r26, 0x80	; 128
    14be:	bf e3       	ldi	r27, 0x3F	; 63
    14c0:	80 83       	st	Z, r24
    14c2:	91 83       	std	Z+1, r25	; 0x01
    14c4:	a2 83       	std	Z+2, r26	; 0x02
    14c6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14c8:	8e 01       	movw	r16, r28
    14ca:	03 5b       	subi	r16, 0xB3	; 179
    14cc:	1f 4f       	sbci	r17, 0xFF	; 255
    14ce:	fe 01       	movw	r30, r28
    14d0:	ef 5a       	subi	r30, 0xAF	; 175
    14d2:	ff 4f       	sbci	r31, 0xFF	; 255
    14d4:	60 81       	ld	r22, Z
    14d6:	71 81       	ldd	r23, Z+1	; 0x01
    14d8:	82 81       	ldd	r24, Z+2	; 0x02
    14da:	93 81       	ldd	r25, Z+3	; 0x03
    14dc:	20 e0       	ldi	r18, 0x00	; 0
    14de:	30 e0       	ldi	r19, 0x00	; 0
    14e0:	4a e7       	ldi	r20, 0x7A	; 122
    14e2:	53 e4       	ldi	r21, 0x43	; 67
    14e4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14e8:	dc 01       	movw	r26, r24
    14ea:	cb 01       	movw	r24, r22
    14ec:	f8 01       	movw	r30, r16
    14ee:	80 83       	st	Z, r24
    14f0:	91 83       	std	Z+1, r25	; 0x01
    14f2:	a2 83       	std	Z+2, r26	; 0x02
    14f4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    14f6:	fe 01       	movw	r30, r28
    14f8:	e3 5b       	subi	r30, 0xB3	; 179
    14fa:	ff 4f       	sbci	r31, 0xFF	; 255
    14fc:	60 81       	ld	r22, Z
    14fe:	71 81       	ldd	r23, Z+1	; 0x01
    1500:	82 81       	ldd	r24, Z+2	; 0x02
    1502:	93 81       	ldd	r25, Z+3	; 0x03
    1504:	20 e0       	ldi	r18, 0x00	; 0
    1506:	30 e0       	ldi	r19, 0x00	; 0
    1508:	40 e8       	ldi	r20, 0x80	; 128
    150a:	5f e3       	ldi	r21, 0x3F	; 63
    150c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1510:	88 23       	and	r24, r24
    1512:	44 f4       	brge	.+16     	; 0x1524 <LCD_sendCommand+0x20e>
		__ticks = 1;
    1514:	fe 01       	movw	r30, r28
    1516:	e5 5b       	subi	r30, 0xB5	; 181
    1518:	ff 4f       	sbci	r31, 0xFF	; 255
    151a:	81 e0       	ldi	r24, 0x01	; 1
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	91 83       	std	Z+1, r25	; 0x01
    1520:	80 83       	st	Z, r24
    1522:	64 c0       	rjmp	.+200    	; 0x15ec <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    1524:	fe 01       	movw	r30, r28
    1526:	e3 5b       	subi	r30, 0xB3	; 179
    1528:	ff 4f       	sbci	r31, 0xFF	; 255
    152a:	60 81       	ld	r22, Z
    152c:	71 81       	ldd	r23, Z+1	; 0x01
    152e:	82 81       	ldd	r24, Z+2	; 0x02
    1530:	93 81       	ldd	r25, Z+3	; 0x03
    1532:	20 e0       	ldi	r18, 0x00	; 0
    1534:	3f ef       	ldi	r19, 0xFF	; 255
    1536:	4f e7       	ldi	r20, 0x7F	; 127
    1538:	57 e4       	ldi	r21, 0x47	; 71
    153a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    153e:	18 16       	cp	r1, r24
    1540:	0c f0       	brlt	.+2      	; 0x1544 <LCD_sendCommand+0x22e>
    1542:	43 c0       	rjmp	.+134    	; 0x15ca <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1544:	fe 01       	movw	r30, r28
    1546:	ef 5a       	subi	r30, 0xAF	; 175
    1548:	ff 4f       	sbci	r31, 0xFF	; 255
    154a:	60 81       	ld	r22, Z
    154c:	71 81       	ldd	r23, Z+1	; 0x01
    154e:	82 81       	ldd	r24, Z+2	; 0x02
    1550:	93 81       	ldd	r25, Z+3	; 0x03
    1552:	20 e0       	ldi	r18, 0x00	; 0
    1554:	30 e0       	ldi	r19, 0x00	; 0
    1556:	40 e2       	ldi	r20, 0x20	; 32
    1558:	51 e4       	ldi	r21, 0x41	; 65
    155a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    155e:	dc 01       	movw	r26, r24
    1560:	cb 01       	movw	r24, r22
    1562:	8e 01       	movw	r16, r28
    1564:	05 5b       	subi	r16, 0xB5	; 181
    1566:	1f 4f       	sbci	r17, 0xFF	; 255
    1568:	bc 01       	movw	r22, r24
    156a:	cd 01       	movw	r24, r26
    156c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1570:	dc 01       	movw	r26, r24
    1572:	cb 01       	movw	r24, r22
    1574:	f8 01       	movw	r30, r16
    1576:	91 83       	std	Z+1, r25	; 0x01
    1578:	80 83       	st	Z, r24
    157a:	1f c0       	rjmp	.+62     	; 0x15ba <LCD_sendCommand+0x2a4>
    157c:	fe 01       	movw	r30, r28
    157e:	e7 5b       	subi	r30, 0xB7	; 183
    1580:	ff 4f       	sbci	r31, 0xFF	; 255
    1582:	89 e1       	ldi	r24, 0x19	; 25
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	91 83       	std	Z+1, r25	; 0x01
    1588:	80 83       	st	Z, r24
    158a:	fe 01       	movw	r30, r28
    158c:	e7 5b       	subi	r30, 0xB7	; 183
    158e:	ff 4f       	sbci	r31, 0xFF	; 255
    1590:	80 81       	ld	r24, Z
    1592:	91 81       	ldd	r25, Z+1	; 0x01
    1594:	01 97       	sbiw	r24, 0x01	; 1
    1596:	f1 f7       	brne	.-4      	; 0x1594 <LCD_sendCommand+0x27e>
    1598:	fe 01       	movw	r30, r28
    159a:	e7 5b       	subi	r30, 0xB7	; 183
    159c:	ff 4f       	sbci	r31, 0xFF	; 255
    159e:	91 83       	std	Z+1, r25	; 0x01
    15a0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15a2:	de 01       	movw	r26, r28
    15a4:	a5 5b       	subi	r26, 0xB5	; 181
    15a6:	bf 4f       	sbci	r27, 0xFF	; 255
    15a8:	fe 01       	movw	r30, r28
    15aa:	e5 5b       	subi	r30, 0xB5	; 181
    15ac:	ff 4f       	sbci	r31, 0xFF	; 255
    15ae:	80 81       	ld	r24, Z
    15b0:	91 81       	ldd	r25, Z+1	; 0x01
    15b2:	01 97       	sbiw	r24, 0x01	; 1
    15b4:	11 96       	adiw	r26, 0x01	; 1
    15b6:	9c 93       	st	X, r25
    15b8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15ba:	fe 01       	movw	r30, r28
    15bc:	e5 5b       	subi	r30, 0xB5	; 181
    15be:	ff 4f       	sbci	r31, 0xFF	; 255
    15c0:	80 81       	ld	r24, Z
    15c2:	91 81       	ldd	r25, Z+1	; 0x01
    15c4:	00 97       	sbiw	r24, 0x00	; 0
    15c6:	d1 f6       	brne	.-76     	; 0x157c <LCD_sendCommand+0x266>
    15c8:	27 c0       	rjmp	.+78     	; 0x1618 <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15ca:	8e 01       	movw	r16, r28
    15cc:	05 5b       	subi	r16, 0xB5	; 181
    15ce:	1f 4f       	sbci	r17, 0xFF	; 255
    15d0:	fe 01       	movw	r30, r28
    15d2:	e3 5b       	subi	r30, 0xB3	; 179
    15d4:	ff 4f       	sbci	r31, 0xFF	; 255
    15d6:	60 81       	ld	r22, Z
    15d8:	71 81       	ldd	r23, Z+1	; 0x01
    15da:	82 81       	ldd	r24, Z+2	; 0x02
    15dc:	93 81       	ldd	r25, Z+3	; 0x03
    15de:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15e2:	dc 01       	movw	r26, r24
    15e4:	cb 01       	movw	r24, r22
    15e6:	f8 01       	movw	r30, r16
    15e8:	91 83       	std	Z+1, r25	; 0x01
    15ea:	80 83       	st	Z, r24
    15ec:	de 01       	movw	r26, r28
    15ee:	a9 5b       	subi	r26, 0xB9	; 185
    15f0:	bf 4f       	sbci	r27, 0xFF	; 255
    15f2:	fe 01       	movw	r30, r28
    15f4:	e5 5b       	subi	r30, 0xB5	; 181
    15f6:	ff 4f       	sbci	r31, 0xFF	; 255
    15f8:	80 81       	ld	r24, Z
    15fa:	91 81       	ldd	r25, Z+1	; 0x01
    15fc:	8d 93       	st	X+, r24
    15fe:	9c 93       	st	X, r25
    1600:	fe 01       	movw	r30, r28
    1602:	e9 5b       	subi	r30, 0xB9	; 185
    1604:	ff 4f       	sbci	r31, 0xFF	; 255
    1606:	80 81       	ld	r24, Z
    1608:	91 81       	ldd	r25, Z+1	; 0x01
    160a:	01 97       	sbiw	r24, 0x01	; 1
    160c:	f1 f7       	brne	.-4      	; 0x160a <LCD_sendCommand+0x2f4>
    160e:	fe 01       	movw	r30, r28
    1610:	e9 5b       	subi	r30, 0xB9	; 185
    1612:	ff 4f       	sbci	r31, 0xFF	; 255
    1614:	91 83       	std	Z+1, r25	; 0x01
    1616:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    1618:	fe 01       	movw	r30, r28
    161a:	ed 59       	subi	r30, 0x9D	; 157
    161c:	ff 4f       	sbci	r31, 0xFF	; 255
    161e:	80 81       	ld	r24, Z
    1620:	88 2f       	mov	r24, r24
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	80 71       	andi	r24, 0x10	; 16
    1626:	90 70       	andi	r25, 0x00	; 0
    1628:	95 95       	asr	r25
    162a:	87 95       	ror	r24
    162c:	95 95       	asr	r25
    162e:	87 95       	ror	r24
    1630:	95 95       	asr	r25
    1632:	87 95       	ror	r24
    1634:	95 95       	asr	r25
    1636:	87 95       	ror	r24
    1638:	98 2f       	mov	r25, r24
    163a:	80 e0       	ldi	r24, 0x00	; 0
    163c:	63 e0       	ldi	r22, 0x03	; 3
    163e:	49 2f       	mov	r20, r25
    1640:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    1644:	fe 01       	movw	r30, r28
    1646:	ed 59       	subi	r30, 0x9D	; 157
    1648:	ff 4f       	sbci	r31, 0xFF	; 255
    164a:	80 81       	ld	r24, Z
    164c:	88 2f       	mov	r24, r24
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	80 72       	andi	r24, 0x20	; 32
    1652:	90 70       	andi	r25, 0x00	; 0
    1654:	95 95       	asr	r25
    1656:	87 95       	ror	r24
    1658:	95 95       	asr	r25
    165a:	87 95       	ror	r24
    165c:	95 95       	asr	r25
    165e:	87 95       	ror	r24
    1660:	95 95       	asr	r25
    1662:	87 95       	ror	r24
    1664:	95 95       	asr	r25
    1666:	87 95       	ror	r24
    1668:	98 2f       	mov	r25, r24
    166a:	80 e0       	ldi	r24, 0x00	; 0
    166c:	64 e0       	ldi	r22, 0x04	; 4
    166e:	49 2f       	mov	r20, r25
    1670:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    1674:	fe 01       	movw	r30, r28
    1676:	ed 59       	subi	r30, 0x9D	; 157
    1678:	ff 4f       	sbci	r31, 0xFF	; 255
    167a:	80 81       	ld	r24, Z
    167c:	88 2f       	mov	r24, r24
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	80 74       	andi	r24, 0x40	; 64
    1682:	90 70       	andi	r25, 0x00	; 0
    1684:	08 2e       	mov	r0, r24
    1686:	89 2f       	mov	r24, r25
    1688:	00 0c       	add	r0, r0
    168a:	88 1f       	adc	r24, r24
    168c:	99 0b       	sbc	r25, r25
    168e:	00 0c       	add	r0, r0
    1690:	88 1f       	adc	r24, r24
    1692:	99 1f       	adc	r25, r25
    1694:	98 2f       	mov	r25, r24
    1696:	80 e0       	ldi	r24, 0x00	; 0
    1698:	65 e0       	ldi	r22, 0x05	; 5
    169a:	49 2f       	mov	r20, r25
    169c:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    16a0:	fe 01       	movw	r30, r28
    16a2:	ed 59       	subi	r30, 0x9D	; 157
    16a4:	ff 4f       	sbci	r31, 0xFF	; 255
    16a6:	80 81       	ld	r24, Z
    16a8:	98 2f       	mov	r25, r24
    16aa:	99 1f       	adc	r25, r25
    16ac:	99 27       	eor	r25, r25
    16ae:	99 1f       	adc	r25, r25
    16b0:	80 e0       	ldi	r24, 0x00	; 0
    16b2:	66 e0       	ldi	r22, 0x06	; 6
    16b4:	49 2f       	mov	r20, r25
    16b6:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>
    16ba:	fe 01       	movw	r30, r28
    16bc:	ed 5b       	subi	r30, 0xBD	; 189
    16be:	ff 4f       	sbci	r31, 0xFF	; 255
    16c0:	80 e0       	ldi	r24, 0x00	; 0
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	a0 e8       	ldi	r26, 0x80	; 128
    16c6:	bf e3       	ldi	r27, 0x3F	; 63
    16c8:	80 83       	st	Z, r24
    16ca:	91 83       	std	Z+1, r25	; 0x01
    16cc:	a2 83       	std	Z+2, r26	; 0x02
    16ce:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16d0:	8e 01       	movw	r16, r28
    16d2:	01 5c       	subi	r16, 0xC1	; 193
    16d4:	1f 4f       	sbci	r17, 0xFF	; 255
    16d6:	fe 01       	movw	r30, r28
    16d8:	ed 5b       	subi	r30, 0xBD	; 189
    16da:	ff 4f       	sbci	r31, 0xFF	; 255
    16dc:	60 81       	ld	r22, Z
    16de:	71 81       	ldd	r23, Z+1	; 0x01
    16e0:	82 81       	ldd	r24, Z+2	; 0x02
    16e2:	93 81       	ldd	r25, Z+3	; 0x03
    16e4:	20 e0       	ldi	r18, 0x00	; 0
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	4a e7       	ldi	r20, 0x7A	; 122
    16ea:	53 e4       	ldi	r21, 0x43	; 67
    16ec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16f0:	dc 01       	movw	r26, r24
    16f2:	cb 01       	movw	r24, r22
    16f4:	f8 01       	movw	r30, r16
    16f6:	80 83       	st	Z, r24
    16f8:	91 83       	std	Z+1, r25	; 0x01
    16fa:	a2 83       	std	Z+2, r26	; 0x02
    16fc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    16fe:	fe 01       	movw	r30, r28
    1700:	ff 96       	adiw	r30, 0x3f	; 63
    1702:	60 81       	ld	r22, Z
    1704:	71 81       	ldd	r23, Z+1	; 0x01
    1706:	82 81       	ldd	r24, Z+2	; 0x02
    1708:	93 81       	ldd	r25, Z+3	; 0x03
    170a:	20 e0       	ldi	r18, 0x00	; 0
    170c:	30 e0       	ldi	r19, 0x00	; 0
    170e:	40 e8       	ldi	r20, 0x80	; 128
    1710:	5f e3       	ldi	r21, 0x3F	; 63
    1712:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1716:	88 23       	and	r24, r24
    1718:	2c f4       	brge	.+10     	; 0x1724 <LCD_sendCommand+0x40e>
		__ticks = 1;
    171a:	81 e0       	ldi	r24, 0x01	; 1
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	9e af       	std	Y+62, r25	; 0x3e
    1720:	8d af       	std	Y+61, r24	; 0x3d
    1722:	46 c0       	rjmp	.+140    	; 0x17b0 <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    1724:	fe 01       	movw	r30, r28
    1726:	ff 96       	adiw	r30, 0x3f	; 63
    1728:	60 81       	ld	r22, Z
    172a:	71 81       	ldd	r23, Z+1	; 0x01
    172c:	82 81       	ldd	r24, Z+2	; 0x02
    172e:	93 81       	ldd	r25, Z+3	; 0x03
    1730:	20 e0       	ldi	r18, 0x00	; 0
    1732:	3f ef       	ldi	r19, 0xFF	; 255
    1734:	4f e7       	ldi	r20, 0x7F	; 127
    1736:	57 e4       	ldi	r21, 0x47	; 71
    1738:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    173c:	18 16       	cp	r1, r24
    173e:	64 f5       	brge	.+88     	; 0x1798 <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1740:	fe 01       	movw	r30, r28
    1742:	ed 5b       	subi	r30, 0xBD	; 189
    1744:	ff 4f       	sbci	r31, 0xFF	; 255
    1746:	60 81       	ld	r22, Z
    1748:	71 81       	ldd	r23, Z+1	; 0x01
    174a:	82 81       	ldd	r24, Z+2	; 0x02
    174c:	93 81       	ldd	r25, Z+3	; 0x03
    174e:	20 e0       	ldi	r18, 0x00	; 0
    1750:	30 e0       	ldi	r19, 0x00	; 0
    1752:	40 e2       	ldi	r20, 0x20	; 32
    1754:	51 e4       	ldi	r21, 0x41	; 65
    1756:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    175a:	dc 01       	movw	r26, r24
    175c:	cb 01       	movw	r24, r22
    175e:	bc 01       	movw	r22, r24
    1760:	cd 01       	movw	r24, r26
    1762:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1766:	dc 01       	movw	r26, r24
    1768:	cb 01       	movw	r24, r22
    176a:	9e af       	std	Y+62, r25	; 0x3e
    176c:	8d af       	std	Y+61, r24	; 0x3d
    176e:	0f c0       	rjmp	.+30     	; 0x178e <LCD_sendCommand+0x478>
    1770:	89 e1       	ldi	r24, 0x19	; 25
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	9c af       	std	Y+60, r25	; 0x3c
    1776:	8b af       	std	Y+59, r24	; 0x3b
    1778:	8b ad       	ldd	r24, Y+59	; 0x3b
    177a:	9c ad       	ldd	r25, Y+60	; 0x3c
    177c:	01 97       	sbiw	r24, 0x01	; 1
    177e:	f1 f7       	brne	.-4      	; 0x177c <LCD_sendCommand+0x466>
    1780:	9c af       	std	Y+60, r25	; 0x3c
    1782:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1784:	8d ad       	ldd	r24, Y+61	; 0x3d
    1786:	9e ad       	ldd	r25, Y+62	; 0x3e
    1788:	01 97       	sbiw	r24, 0x01	; 1
    178a:	9e af       	std	Y+62, r25	; 0x3e
    178c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    178e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1790:	9e ad       	ldd	r25, Y+62	; 0x3e
    1792:	00 97       	sbiw	r24, 0x00	; 0
    1794:	69 f7       	brne	.-38     	; 0x1770 <LCD_sendCommand+0x45a>
    1796:	16 c0       	rjmp	.+44     	; 0x17c4 <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1798:	fe 01       	movw	r30, r28
    179a:	ff 96       	adiw	r30, 0x3f	; 63
    179c:	60 81       	ld	r22, Z
    179e:	71 81       	ldd	r23, Z+1	; 0x01
    17a0:	82 81       	ldd	r24, Z+2	; 0x02
    17a2:	93 81       	ldd	r25, Z+3	; 0x03
    17a4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17a8:	dc 01       	movw	r26, r24
    17aa:	cb 01       	movw	r24, r22
    17ac:	9e af       	std	Y+62, r25	; 0x3e
    17ae:	8d af       	std	Y+61, r24	; 0x3d
    17b0:	8d ad       	ldd	r24, Y+61	; 0x3d
    17b2:	9e ad       	ldd	r25, Y+62	; 0x3e
    17b4:	9a af       	std	Y+58, r25	; 0x3a
    17b6:	89 af       	std	Y+57, r24	; 0x39
    17b8:	89 ad       	ldd	r24, Y+57	; 0x39
    17ba:	9a ad       	ldd	r25, Y+58	; 0x3a
    17bc:	01 97       	sbiw	r24, 0x01	; 1
    17be:	f1 f7       	brne	.-4      	; 0x17bc <LCD_sendCommand+0x4a6>
    17c0:	9a af       	std	Y+58, r25	; 0x3a
    17c2:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    17c4:	80 e0       	ldi	r24, 0x00	; 0
    17c6:	62 e0       	ldi	r22, 0x02	; 2
    17c8:	40 e0       	ldi	r20, 0x00	; 0
    17ca:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>
    17ce:	80 e0       	ldi	r24, 0x00	; 0
    17d0:	90 e0       	ldi	r25, 0x00	; 0
    17d2:	a0 e8       	ldi	r26, 0x80	; 128
    17d4:	bf e3       	ldi	r27, 0x3F	; 63
    17d6:	8d ab       	std	Y+53, r24	; 0x35
    17d8:	9e ab       	std	Y+54, r25	; 0x36
    17da:	af ab       	std	Y+55, r26	; 0x37
    17dc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17de:	6d a9       	ldd	r22, Y+53	; 0x35
    17e0:	7e a9       	ldd	r23, Y+54	; 0x36
    17e2:	8f a9       	ldd	r24, Y+55	; 0x37
    17e4:	98 ad       	ldd	r25, Y+56	; 0x38
    17e6:	20 e0       	ldi	r18, 0x00	; 0
    17e8:	30 e0       	ldi	r19, 0x00	; 0
    17ea:	4a e7       	ldi	r20, 0x7A	; 122
    17ec:	53 e4       	ldi	r21, 0x43	; 67
    17ee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17f2:	dc 01       	movw	r26, r24
    17f4:	cb 01       	movw	r24, r22
    17f6:	89 ab       	std	Y+49, r24	; 0x31
    17f8:	9a ab       	std	Y+50, r25	; 0x32
    17fa:	ab ab       	std	Y+51, r26	; 0x33
    17fc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    17fe:	69 a9       	ldd	r22, Y+49	; 0x31
    1800:	7a a9       	ldd	r23, Y+50	; 0x32
    1802:	8b a9       	ldd	r24, Y+51	; 0x33
    1804:	9c a9       	ldd	r25, Y+52	; 0x34
    1806:	20 e0       	ldi	r18, 0x00	; 0
    1808:	30 e0       	ldi	r19, 0x00	; 0
    180a:	40 e8       	ldi	r20, 0x80	; 128
    180c:	5f e3       	ldi	r21, 0x3F	; 63
    180e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1812:	88 23       	and	r24, r24
    1814:	2c f4       	brge	.+10     	; 0x1820 <LCD_sendCommand+0x50a>
		__ticks = 1;
    1816:	81 e0       	ldi	r24, 0x01	; 1
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	98 ab       	std	Y+48, r25	; 0x30
    181c:	8f a7       	std	Y+47, r24	; 0x2f
    181e:	3f c0       	rjmp	.+126    	; 0x189e <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    1820:	69 a9       	ldd	r22, Y+49	; 0x31
    1822:	7a a9       	ldd	r23, Y+50	; 0x32
    1824:	8b a9       	ldd	r24, Y+51	; 0x33
    1826:	9c a9       	ldd	r25, Y+52	; 0x34
    1828:	20 e0       	ldi	r18, 0x00	; 0
    182a:	3f ef       	ldi	r19, 0xFF	; 255
    182c:	4f e7       	ldi	r20, 0x7F	; 127
    182e:	57 e4       	ldi	r21, 0x47	; 71
    1830:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1834:	18 16       	cp	r1, r24
    1836:	4c f5       	brge	.+82     	; 0x188a <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1838:	6d a9       	ldd	r22, Y+53	; 0x35
    183a:	7e a9       	ldd	r23, Y+54	; 0x36
    183c:	8f a9       	ldd	r24, Y+55	; 0x37
    183e:	98 ad       	ldd	r25, Y+56	; 0x38
    1840:	20 e0       	ldi	r18, 0x00	; 0
    1842:	30 e0       	ldi	r19, 0x00	; 0
    1844:	40 e2       	ldi	r20, 0x20	; 32
    1846:	51 e4       	ldi	r21, 0x41	; 65
    1848:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    184c:	dc 01       	movw	r26, r24
    184e:	cb 01       	movw	r24, r22
    1850:	bc 01       	movw	r22, r24
    1852:	cd 01       	movw	r24, r26
    1854:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1858:	dc 01       	movw	r26, r24
    185a:	cb 01       	movw	r24, r22
    185c:	98 ab       	std	Y+48, r25	; 0x30
    185e:	8f a7       	std	Y+47, r24	; 0x2f
    1860:	0f c0       	rjmp	.+30     	; 0x1880 <LCD_sendCommand+0x56a>
    1862:	89 e1       	ldi	r24, 0x19	; 25
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	9e a7       	std	Y+46, r25	; 0x2e
    1868:	8d a7       	std	Y+45, r24	; 0x2d
    186a:	8d a5       	ldd	r24, Y+45	; 0x2d
    186c:	9e a5       	ldd	r25, Y+46	; 0x2e
    186e:	01 97       	sbiw	r24, 0x01	; 1
    1870:	f1 f7       	brne	.-4      	; 0x186e <LCD_sendCommand+0x558>
    1872:	9e a7       	std	Y+46, r25	; 0x2e
    1874:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1876:	8f a5       	ldd	r24, Y+47	; 0x2f
    1878:	98 a9       	ldd	r25, Y+48	; 0x30
    187a:	01 97       	sbiw	r24, 0x01	; 1
    187c:	98 ab       	std	Y+48, r25	; 0x30
    187e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1880:	8f a5       	ldd	r24, Y+47	; 0x2f
    1882:	98 a9       	ldd	r25, Y+48	; 0x30
    1884:	00 97       	sbiw	r24, 0x00	; 0
    1886:	69 f7       	brne	.-38     	; 0x1862 <LCD_sendCommand+0x54c>
    1888:	14 c0       	rjmp	.+40     	; 0x18b2 <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    188a:	69 a9       	ldd	r22, Y+49	; 0x31
    188c:	7a a9       	ldd	r23, Y+50	; 0x32
    188e:	8b a9       	ldd	r24, Y+51	; 0x33
    1890:	9c a9       	ldd	r25, Y+52	; 0x34
    1892:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1896:	dc 01       	movw	r26, r24
    1898:	cb 01       	movw	r24, r22
    189a:	98 ab       	std	Y+48, r25	; 0x30
    189c:	8f a7       	std	Y+47, r24	; 0x2f
    189e:	8f a5       	ldd	r24, Y+47	; 0x2f
    18a0:	98 a9       	ldd	r25, Y+48	; 0x30
    18a2:	9c a7       	std	Y+44, r25	; 0x2c
    18a4:	8b a7       	std	Y+43, r24	; 0x2b
    18a6:	8b a5       	ldd	r24, Y+43	; 0x2b
    18a8:	9c a5       	ldd	r25, Y+44	; 0x2c
    18aa:	01 97       	sbiw	r24, 0x01	; 1
    18ac:	f1 f7       	brne	.-4      	; 0x18aa <LCD_sendCommand+0x594>
    18ae:	9c a7       	std	Y+44, r25	; 0x2c
    18b0:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    18b2:	80 e0       	ldi	r24, 0x00	; 0
    18b4:	62 e0       	ldi	r22, 0x02	; 2
    18b6:	41 e0       	ldi	r20, 0x01	; 1
    18b8:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>
    18bc:	80 e0       	ldi	r24, 0x00	; 0
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	a0 e8       	ldi	r26, 0x80	; 128
    18c2:	bf e3       	ldi	r27, 0x3F	; 63
    18c4:	8f a3       	std	Y+39, r24	; 0x27
    18c6:	98 a7       	std	Y+40, r25	; 0x28
    18c8:	a9 a7       	std	Y+41, r26	; 0x29
    18ca:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18cc:	6f a1       	ldd	r22, Y+39	; 0x27
    18ce:	78 a5       	ldd	r23, Y+40	; 0x28
    18d0:	89 a5       	ldd	r24, Y+41	; 0x29
    18d2:	9a a5       	ldd	r25, Y+42	; 0x2a
    18d4:	20 e0       	ldi	r18, 0x00	; 0
    18d6:	30 e0       	ldi	r19, 0x00	; 0
    18d8:	4a e7       	ldi	r20, 0x7A	; 122
    18da:	53 e4       	ldi	r21, 0x43	; 67
    18dc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18e0:	dc 01       	movw	r26, r24
    18e2:	cb 01       	movw	r24, r22
    18e4:	8b a3       	std	Y+35, r24	; 0x23
    18e6:	9c a3       	std	Y+36, r25	; 0x24
    18e8:	ad a3       	std	Y+37, r26	; 0x25
    18ea:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    18ec:	6b a1       	ldd	r22, Y+35	; 0x23
    18ee:	7c a1       	ldd	r23, Y+36	; 0x24
    18f0:	8d a1       	ldd	r24, Y+37	; 0x25
    18f2:	9e a1       	ldd	r25, Y+38	; 0x26
    18f4:	20 e0       	ldi	r18, 0x00	; 0
    18f6:	30 e0       	ldi	r19, 0x00	; 0
    18f8:	40 e8       	ldi	r20, 0x80	; 128
    18fa:	5f e3       	ldi	r21, 0x3F	; 63
    18fc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1900:	88 23       	and	r24, r24
    1902:	2c f4       	brge	.+10     	; 0x190e <LCD_sendCommand+0x5f8>
		__ticks = 1;
    1904:	81 e0       	ldi	r24, 0x01	; 1
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	9a a3       	std	Y+34, r25	; 0x22
    190a:	89 a3       	std	Y+33, r24	; 0x21
    190c:	3f c0       	rjmp	.+126    	; 0x198c <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    190e:	6b a1       	ldd	r22, Y+35	; 0x23
    1910:	7c a1       	ldd	r23, Y+36	; 0x24
    1912:	8d a1       	ldd	r24, Y+37	; 0x25
    1914:	9e a1       	ldd	r25, Y+38	; 0x26
    1916:	20 e0       	ldi	r18, 0x00	; 0
    1918:	3f ef       	ldi	r19, 0xFF	; 255
    191a:	4f e7       	ldi	r20, 0x7F	; 127
    191c:	57 e4       	ldi	r21, 0x47	; 71
    191e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1922:	18 16       	cp	r1, r24
    1924:	4c f5       	brge	.+82     	; 0x1978 <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1926:	6f a1       	ldd	r22, Y+39	; 0x27
    1928:	78 a5       	ldd	r23, Y+40	; 0x28
    192a:	89 a5       	ldd	r24, Y+41	; 0x29
    192c:	9a a5       	ldd	r25, Y+42	; 0x2a
    192e:	20 e0       	ldi	r18, 0x00	; 0
    1930:	30 e0       	ldi	r19, 0x00	; 0
    1932:	40 e2       	ldi	r20, 0x20	; 32
    1934:	51 e4       	ldi	r21, 0x41	; 65
    1936:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    193a:	dc 01       	movw	r26, r24
    193c:	cb 01       	movw	r24, r22
    193e:	bc 01       	movw	r22, r24
    1940:	cd 01       	movw	r24, r26
    1942:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1946:	dc 01       	movw	r26, r24
    1948:	cb 01       	movw	r24, r22
    194a:	9a a3       	std	Y+34, r25	; 0x22
    194c:	89 a3       	std	Y+33, r24	; 0x21
    194e:	0f c0       	rjmp	.+30     	; 0x196e <LCD_sendCommand+0x658>
    1950:	89 e1       	ldi	r24, 0x19	; 25
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	98 a3       	std	Y+32, r25	; 0x20
    1956:	8f 8f       	std	Y+31, r24	; 0x1f
    1958:	8f 8d       	ldd	r24, Y+31	; 0x1f
    195a:	98 a1       	ldd	r25, Y+32	; 0x20
    195c:	01 97       	sbiw	r24, 0x01	; 1
    195e:	f1 f7       	brne	.-4      	; 0x195c <LCD_sendCommand+0x646>
    1960:	98 a3       	std	Y+32, r25	; 0x20
    1962:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1964:	89 a1       	ldd	r24, Y+33	; 0x21
    1966:	9a a1       	ldd	r25, Y+34	; 0x22
    1968:	01 97       	sbiw	r24, 0x01	; 1
    196a:	9a a3       	std	Y+34, r25	; 0x22
    196c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    196e:	89 a1       	ldd	r24, Y+33	; 0x21
    1970:	9a a1       	ldd	r25, Y+34	; 0x22
    1972:	00 97       	sbiw	r24, 0x00	; 0
    1974:	69 f7       	brne	.-38     	; 0x1950 <LCD_sendCommand+0x63a>
    1976:	14 c0       	rjmp	.+40     	; 0x19a0 <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1978:	6b a1       	ldd	r22, Y+35	; 0x23
    197a:	7c a1       	ldd	r23, Y+36	; 0x24
    197c:	8d a1       	ldd	r24, Y+37	; 0x25
    197e:	9e a1       	ldd	r25, Y+38	; 0x26
    1980:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1984:	dc 01       	movw	r26, r24
    1986:	cb 01       	movw	r24, r22
    1988:	9a a3       	std	Y+34, r25	; 0x22
    198a:	89 a3       	std	Y+33, r24	; 0x21
    198c:	89 a1       	ldd	r24, Y+33	; 0x21
    198e:	9a a1       	ldd	r25, Y+34	; 0x22
    1990:	9e 8f       	std	Y+30, r25	; 0x1e
    1992:	8d 8f       	std	Y+29, r24	; 0x1d
    1994:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1996:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1998:	01 97       	sbiw	r24, 0x01	; 1
    199a:	f1 f7       	brne	.-4      	; 0x1998 <LCD_sendCommand+0x682>
    199c:	9e 8f       	std	Y+30, r25	; 0x1e
    199e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    19a0:	fe 01       	movw	r30, r28
    19a2:	ed 59       	subi	r30, 0x9D	; 157
    19a4:	ff 4f       	sbci	r31, 0xFF	; 255
    19a6:	80 81       	ld	r24, Z
    19a8:	98 2f       	mov	r25, r24
    19aa:	91 70       	andi	r25, 0x01	; 1
    19ac:	80 e0       	ldi	r24, 0x00	; 0
    19ae:	63 e0       	ldi	r22, 0x03	; 3
    19b0:	49 2f       	mov	r20, r25
    19b2:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    19b6:	fe 01       	movw	r30, r28
    19b8:	ed 59       	subi	r30, 0x9D	; 157
    19ba:	ff 4f       	sbci	r31, 0xFF	; 255
    19bc:	80 81       	ld	r24, Z
    19be:	88 2f       	mov	r24, r24
    19c0:	90 e0       	ldi	r25, 0x00	; 0
    19c2:	82 70       	andi	r24, 0x02	; 2
    19c4:	90 70       	andi	r25, 0x00	; 0
    19c6:	95 95       	asr	r25
    19c8:	87 95       	ror	r24
    19ca:	98 2f       	mov	r25, r24
    19cc:	80 e0       	ldi	r24, 0x00	; 0
    19ce:	64 e0       	ldi	r22, 0x04	; 4
    19d0:	49 2f       	mov	r20, r25
    19d2:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    19d6:	fe 01       	movw	r30, r28
    19d8:	ed 59       	subi	r30, 0x9D	; 157
    19da:	ff 4f       	sbci	r31, 0xFF	; 255
    19dc:	80 81       	ld	r24, Z
    19de:	88 2f       	mov	r24, r24
    19e0:	90 e0       	ldi	r25, 0x00	; 0
    19e2:	84 70       	andi	r24, 0x04	; 4
    19e4:	90 70       	andi	r25, 0x00	; 0
    19e6:	95 95       	asr	r25
    19e8:	87 95       	ror	r24
    19ea:	95 95       	asr	r25
    19ec:	87 95       	ror	r24
    19ee:	98 2f       	mov	r25, r24
    19f0:	80 e0       	ldi	r24, 0x00	; 0
    19f2:	65 e0       	ldi	r22, 0x05	; 5
    19f4:	49 2f       	mov	r20, r25
    19f6:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    19fa:	fe 01       	movw	r30, r28
    19fc:	ed 59       	subi	r30, 0x9D	; 157
    19fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1a00:	80 81       	ld	r24, Z
    1a02:	88 2f       	mov	r24, r24
    1a04:	90 e0       	ldi	r25, 0x00	; 0
    1a06:	88 70       	andi	r24, 0x08	; 8
    1a08:	90 70       	andi	r25, 0x00	; 0
    1a0a:	95 95       	asr	r25
    1a0c:	87 95       	ror	r24
    1a0e:	95 95       	asr	r25
    1a10:	87 95       	ror	r24
    1a12:	95 95       	asr	r25
    1a14:	87 95       	ror	r24
    1a16:	98 2f       	mov	r25, r24
    1a18:	80 e0       	ldi	r24, 0x00	; 0
    1a1a:	66 e0       	ldi	r22, 0x06	; 6
    1a1c:	49 2f       	mov	r20, r25
    1a1e:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>
    1a22:	80 e0       	ldi	r24, 0x00	; 0
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	a0 e8       	ldi	r26, 0x80	; 128
    1a28:	bf e3       	ldi	r27, 0x3F	; 63
    1a2a:	89 8f       	std	Y+25, r24	; 0x19
    1a2c:	9a 8f       	std	Y+26, r25	; 0x1a
    1a2e:	ab 8f       	std	Y+27, r26	; 0x1b
    1a30:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a32:	69 8d       	ldd	r22, Y+25	; 0x19
    1a34:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a36:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a38:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a3a:	20 e0       	ldi	r18, 0x00	; 0
    1a3c:	30 e0       	ldi	r19, 0x00	; 0
    1a3e:	4a e7       	ldi	r20, 0x7A	; 122
    1a40:	53 e4       	ldi	r21, 0x43	; 67
    1a42:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a46:	dc 01       	movw	r26, r24
    1a48:	cb 01       	movw	r24, r22
    1a4a:	8d 8b       	std	Y+21, r24	; 0x15
    1a4c:	9e 8b       	std	Y+22, r25	; 0x16
    1a4e:	af 8b       	std	Y+23, r26	; 0x17
    1a50:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a52:	6d 89       	ldd	r22, Y+21	; 0x15
    1a54:	7e 89       	ldd	r23, Y+22	; 0x16
    1a56:	8f 89       	ldd	r24, Y+23	; 0x17
    1a58:	98 8d       	ldd	r25, Y+24	; 0x18
    1a5a:	20 e0       	ldi	r18, 0x00	; 0
    1a5c:	30 e0       	ldi	r19, 0x00	; 0
    1a5e:	40 e8       	ldi	r20, 0x80	; 128
    1a60:	5f e3       	ldi	r21, 0x3F	; 63
    1a62:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1a66:	88 23       	and	r24, r24
    1a68:	2c f4       	brge	.+10     	; 0x1a74 <LCD_sendCommand+0x75e>
		__ticks = 1;
    1a6a:	81 e0       	ldi	r24, 0x01	; 1
    1a6c:	90 e0       	ldi	r25, 0x00	; 0
    1a6e:	9c 8b       	std	Y+20, r25	; 0x14
    1a70:	8b 8b       	std	Y+19, r24	; 0x13
    1a72:	3f c0       	rjmp	.+126    	; 0x1af2 <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    1a74:	6d 89       	ldd	r22, Y+21	; 0x15
    1a76:	7e 89       	ldd	r23, Y+22	; 0x16
    1a78:	8f 89       	ldd	r24, Y+23	; 0x17
    1a7a:	98 8d       	ldd	r25, Y+24	; 0x18
    1a7c:	20 e0       	ldi	r18, 0x00	; 0
    1a7e:	3f ef       	ldi	r19, 0xFF	; 255
    1a80:	4f e7       	ldi	r20, 0x7F	; 127
    1a82:	57 e4       	ldi	r21, 0x47	; 71
    1a84:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1a88:	18 16       	cp	r1, r24
    1a8a:	4c f5       	brge	.+82     	; 0x1ade <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a8c:	69 8d       	ldd	r22, Y+25	; 0x19
    1a8e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a90:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a92:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a94:	20 e0       	ldi	r18, 0x00	; 0
    1a96:	30 e0       	ldi	r19, 0x00	; 0
    1a98:	40 e2       	ldi	r20, 0x20	; 32
    1a9a:	51 e4       	ldi	r21, 0x41	; 65
    1a9c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1aa0:	dc 01       	movw	r26, r24
    1aa2:	cb 01       	movw	r24, r22
    1aa4:	bc 01       	movw	r22, r24
    1aa6:	cd 01       	movw	r24, r26
    1aa8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1aac:	dc 01       	movw	r26, r24
    1aae:	cb 01       	movw	r24, r22
    1ab0:	9c 8b       	std	Y+20, r25	; 0x14
    1ab2:	8b 8b       	std	Y+19, r24	; 0x13
    1ab4:	0f c0       	rjmp	.+30     	; 0x1ad4 <LCD_sendCommand+0x7be>
    1ab6:	89 e1       	ldi	r24, 0x19	; 25
    1ab8:	90 e0       	ldi	r25, 0x00	; 0
    1aba:	9a 8b       	std	Y+18, r25	; 0x12
    1abc:	89 8b       	std	Y+17, r24	; 0x11
    1abe:	89 89       	ldd	r24, Y+17	; 0x11
    1ac0:	9a 89       	ldd	r25, Y+18	; 0x12
    1ac2:	01 97       	sbiw	r24, 0x01	; 1
    1ac4:	f1 f7       	brne	.-4      	; 0x1ac2 <LCD_sendCommand+0x7ac>
    1ac6:	9a 8b       	std	Y+18, r25	; 0x12
    1ac8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aca:	8b 89       	ldd	r24, Y+19	; 0x13
    1acc:	9c 89       	ldd	r25, Y+20	; 0x14
    1ace:	01 97       	sbiw	r24, 0x01	; 1
    1ad0:	9c 8b       	std	Y+20, r25	; 0x14
    1ad2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ad4:	8b 89       	ldd	r24, Y+19	; 0x13
    1ad6:	9c 89       	ldd	r25, Y+20	; 0x14
    1ad8:	00 97       	sbiw	r24, 0x00	; 0
    1ada:	69 f7       	brne	.-38     	; 0x1ab6 <LCD_sendCommand+0x7a0>
    1adc:	14 c0       	rjmp	.+40     	; 0x1b06 <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ade:	6d 89       	ldd	r22, Y+21	; 0x15
    1ae0:	7e 89       	ldd	r23, Y+22	; 0x16
    1ae2:	8f 89       	ldd	r24, Y+23	; 0x17
    1ae4:	98 8d       	ldd	r25, Y+24	; 0x18
    1ae6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1aea:	dc 01       	movw	r26, r24
    1aec:	cb 01       	movw	r24, r22
    1aee:	9c 8b       	std	Y+20, r25	; 0x14
    1af0:	8b 8b       	std	Y+19, r24	; 0x13
    1af2:	8b 89       	ldd	r24, Y+19	; 0x13
    1af4:	9c 89       	ldd	r25, Y+20	; 0x14
    1af6:	98 8b       	std	Y+16, r25	; 0x10
    1af8:	8f 87       	std	Y+15, r24	; 0x0f
    1afa:	8f 85       	ldd	r24, Y+15	; 0x0f
    1afc:	98 89       	ldd	r25, Y+16	; 0x10
    1afe:	01 97       	sbiw	r24, 0x01	; 1
    1b00:	f1 f7       	brne	.-4      	; 0x1afe <LCD_sendCommand+0x7e8>
    1b02:	98 8b       	std	Y+16, r25	; 0x10
    1b04:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1b06:	80 e0       	ldi	r24, 0x00	; 0
    1b08:	62 e0       	ldi	r22, 0x02	; 2
    1b0a:	40 e0       	ldi	r20, 0x00	; 0
    1b0c:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>
    1b10:	80 e0       	ldi	r24, 0x00	; 0
    1b12:	90 e0       	ldi	r25, 0x00	; 0
    1b14:	a0 e8       	ldi	r26, 0x80	; 128
    1b16:	bf e3       	ldi	r27, 0x3F	; 63
    1b18:	8b 87       	std	Y+11, r24	; 0x0b
    1b1a:	9c 87       	std	Y+12, r25	; 0x0c
    1b1c:	ad 87       	std	Y+13, r26	; 0x0d
    1b1e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b20:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b22:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b24:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b26:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b28:	20 e0       	ldi	r18, 0x00	; 0
    1b2a:	30 e0       	ldi	r19, 0x00	; 0
    1b2c:	4a e7       	ldi	r20, 0x7A	; 122
    1b2e:	53 e4       	ldi	r21, 0x43	; 67
    1b30:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b34:	dc 01       	movw	r26, r24
    1b36:	cb 01       	movw	r24, r22
    1b38:	8f 83       	std	Y+7, r24	; 0x07
    1b3a:	98 87       	std	Y+8, r25	; 0x08
    1b3c:	a9 87       	std	Y+9, r26	; 0x09
    1b3e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b40:	6f 81       	ldd	r22, Y+7	; 0x07
    1b42:	78 85       	ldd	r23, Y+8	; 0x08
    1b44:	89 85       	ldd	r24, Y+9	; 0x09
    1b46:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b48:	20 e0       	ldi	r18, 0x00	; 0
    1b4a:	30 e0       	ldi	r19, 0x00	; 0
    1b4c:	40 e8       	ldi	r20, 0x80	; 128
    1b4e:	5f e3       	ldi	r21, 0x3F	; 63
    1b50:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1b54:	88 23       	and	r24, r24
    1b56:	2c f4       	brge	.+10     	; 0x1b62 <LCD_sendCommand+0x84c>
		__ticks = 1;
    1b58:	81 e0       	ldi	r24, 0x01	; 1
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	9e 83       	std	Y+6, r25	; 0x06
    1b5e:	8d 83       	std	Y+5, r24	; 0x05
    1b60:	3f c0       	rjmp	.+126    	; 0x1be0 <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    1b62:	6f 81       	ldd	r22, Y+7	; 0x07
    1b64:	78 85       	ldd	r23, Y+8	; 0x08
    1b66:	89 85       	ldd	r24, Y+9	; 0x09
    1b68:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b6a:	20 e0       	ldi	r18, 0x00	; 0
    1b6c:	3f ef       	ldi	r19, 0xFF	; 255
    1b6e:	4f e7       	ldi	r20, 0x7F	; 127
    1b70:	57 e4       	ldi	r21, 0x47	; 71
    1b72:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1b76:	18 16       	cp	r1, r24
    1b78:	4c f5       	brge	.+82     	; 0x1bcc <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b7a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b7c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b7e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b80:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b82:	20 e0       	ldi	r18, 0x00	; 0
    1b84:	30 e0       	ldi	r19, 0x00	; 0
    1b86:	40 e2       	ldi	r20, 0x20	; 32
    1b88:	51 e4       	ldi	r21, 0x41	; 65
    1b8a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b8e:	dc 01       	movw	r26, r24
    1b90:	cb 01       	movw	r24, r22
    1b92:	bc 01       	movw	r22, r24
    1b94:	cd 01       	movw	r24, r26
    1b96:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b9a:	dc 01       	movw	r26, r24
    1b9c:	cb 01       	movw	r24, r22
    1b9e:	9e 83       	std	Y+6, r25	; 0x06
    1ba0:	8d 83       	std	Y+5, r24	; 0x05
    1ba2:	0f c0       	rjmp	.+30     	; 0x1bc2 <LCD_sendCommand+0x8ac>
    1ba4:	89 e1       	ldi	r24, 0x19	; 25
    1ba6:	90 e0       	ldi	r25, 0x00	; 0
    1ba8:	9c 83       	std	Y+4, r25	; 0x04
    1baa:	8b 83       	std	Y+3, r24	; 0x03
    1bac:	8b 81       	ldd	r24, Y+3	; 0x03
    1bae:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb0:	01 97       	sbiw	r24, 0x01	; 1
    1bb2:	f1 f7       	brne	.-4      	; 0x1bb0 <LCD_sendCommand+0x89a>
    1bb4:	9c 83       	std	Y+4, r25	; 0x04
    1bb6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bb8:	8d 81       	ldd	r24, Y+5	; 0x05
    1bba:	9e 81       	ldd	r25, Y+6	; 0x06
    1bbc:	01 97       	sbiw	r24, 0x01	; 1
    1bbe:	9e 83       	std	Y+6, r25	; 0x06
    1bc0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bc2:	8d 81       	ldd	r24, Y+5	; 0x05
    1bc4:	9e 81       	ldd	r25, Y+6	; 0x06
    1bc6:	00 97       	sbiw	r24, 0x00	; 0
    1bc8:	69 f7       	brne	.-38     	; 0x1ba4 <LCD_sendCommand+0x88e>
    1bca:	14 c0       	rjmp	.+40     	; 0x1bf4 <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bcc:	6f 81       	ldd	r22, Y+7	; 0x07
    1bce:	78 85       	ldd	r23, Y+8	; 0x08
    1bd0:	89 85       	ldd	r24, Y+9	; 0x09
    1bd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bd4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bd8:	dc 01       	movw	r26, r24
    1bda:	cb 01       	movw	r24, r22
    1bdc:	9e 83       	std	Y+6, r25	; 0x06
    1bde:	8d 83       	std	Y+5, r24	; 0x05
    1be0:	8d 81       	ldd	r24, Y+5	; 0x05
    1be2:	9e 81       	ldd	r25, Y+6	; 0x06
    1be4:	9a 83       	std	Y+2, r25	; 0x02
    1be6:	89 83       	std	Y+1, r24	; 0x01
    1be8:	89 81       	ldd	r24, Y+1	; 0x01
    1bea:	9a 81       	ldd	r25, Y+2	; 0x02
    1bec:	01 97       	sbiw	r24, 0x01	; 1
    1bee:	f1 f7       	brne	.-4      	; 0x1bec <LCD_sendCommand+0x8d6>
    1bf0:	9a 83       	std	Y+2, r25	; 0x02
    1bf2:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1bf4:	cd 59       	subi	r28, 0x9D	; 157
    1bf6:	df 4f       	sbci	r29, 0xFF	; 255
    1bf8:	0f b6       	in	r0, 0x3f	; 63
    1bfa:	f8 94       	cli
    1bfc:	de bf       	out	0x3e, r29	; 62
    1bfe:	0f be       	out	0x3f, r0	; 63
    1c00:	cd bf       	out	0x3d, r28	; 61
    1c02:	cf 91       	pop	r28
    1c04:	df 91       	pop	r29
    1c06:	1f 91       	pop	r17
    1c08:	0f 91       	pop	r16
    1c0a:	08 95       	ret

00001c0c <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    1c0c:	0f 93       	push	r16
    1c0e:	1f 93       	push	r17
    1c10:	df 93       	push	r29
    1c12:	cf 93       	push	r28
    1c14:	cd b7       	in	r28, 0x3d	; 61
    1c16:	de b7       	in	r29, 0x3e	; 62
    1c18:	c3 56       	subi	r28, 0x63	; 99
    1c1a:	d0 40       	sbci	r29, 0x00	; 0
    1c1c:	0f b6       	in	r0, 0x3f	; 63
    1c1e:	f8 94       	cli
    1c20:	de bf       	out	0x3e, r29	; 62
    1c22:	0f be       	out	0x3f, r0	; 63
    1c24:	cd bf       	out	0x3d, r28	; 61
    1c26:	fe 01       	movw	r30, r28
    1c28:	ed 59       	subi	r30, 0x9D	; 157
    1c2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c2c:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    1c2e:	80 e0       	ldi	r24, 0x00	; 0
    1c30:	61 e0       	ldi	r22, 0x01	; 1
    1c32:	41 e0       	ldi	r20, 0x01	; 1
    1c34:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>
    1c38:	fe 01       	movw	r30, r28
    1c3a:	e1 5a       	subi	r30, 0xA1	; 161
    1c3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c3e:	80 e0       	ldi	r24, 0x00	; 0
    1c40:	90 e0       	ldi	r25, 0x00	; 0
    1c42:	a0 e8       	ldi	r26, 0x80	; 128
    1c44:	bf e3       	ldi	r27, 0x3F	; 63
    1c46:	80 83       	st	Z, r24
    1c48:	91 83       	std	Z+1, r25	; 0x01
    1c4a:	a2 83       	std	Z+2, r26	; 0x02
    1c4c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c4e:	8e 01       	movw	r16, r28
    1c50:	05 5a       	subi	r16, 0xA5	; 165
    1c52:	1f 4f       	sbci	r17, 0xFF	; 255
    1c54:	fe 01       	movw	r30, r28
    1c56:	e1 5a       	subi	r30, 0xA1	; 161
    1c58:	ff 4f       	sbci	r31, 0xFF	; 255
    1c5a:	60 81       	ld	r22, Z
    1c5c:	71 81       	ldd	r23, Z+1	; 0x01
    1c5e:	82 81       	ldd	r24, Z+2	; 0x02
    1c60:	93 81       	ldd	r25, Z+3	; 0x03
    1c62:	20 e0       	ldi	r18, 0x00	; 0
    1c64:	30 e0       	ldi	r19, 0x00	; 0
    1c66:	4a e7       	ldi	r20, 0x7A	; 122
    1c68:	53 e4       	ldi	r21, 0x43	; 67
    1c6a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c6e:	dc 01       	movw	r26, r24
    1c70:	cb 01       	movw	r24, r22
    1c72:	f8 01       	movw	r30, r16
    1c74:	80 83       	st	Z, r24
    1c76:	91 83       	std	Z+1, r25	; 0x01
    1c78:	a2 83       	std	Z+2, r26	; 0x02
    1c7a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c7c:	fe 01       	movw	r30, r28
    1c7e:	e5 5a       	subi	r30, 0xA5	; 165
    1c80:	ff 4f       	sbci	r31, 0xFF	; 255
    1c82:	60 81       	ld	r22, Z
    1c84:	71 81       	ldd	r23, Z+1	; 0x01
    1c86:	82 81       	ldd	r24, Z+2	; 0x02
    1c88:	93 81       	ldd	r25, Z+3	; 0x03
    1c8a:	20 e0       	ldi	r18, 0x00	; 0
    1c8c:	30 e0       	ldi	r19, 0x00	; 0
    1c8e:	40 e8       	ldi	r20, 0x80	; 128
    1c90:	5f e3       	ldi	r21, 0x3F	; 63
    1c92:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1c96:	88 23       	and	r24, r24
    1c98:	44 f4       	brge	.+16     	; 0x1caa <LCD_displayCharacter+0x9e>
		__ticks = 1;
    1c9a:	fe 01       	movw	r30, r28
    1c9c:	e7 5a       	subi	r30, 0xA7	; 167
    1c9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca0:	81 e0       	ldi	r24, 0x01	; 1
    1ca2:	90 e0       	ldi	r25, 0x00	; 0
    1ca4:	91 83       	std	Z+1, r25	; 0x01
    1ca6:	80 83       	st	Z, r24
    1ca8:	64 c0       	rjmp	.+200    	; 0x1d72 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    1caa:	fe 01       	movw	r30, r28
    1cac:	e5 5a       	subi	r30, 0xA5	; 165
    1cae:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb0:	60 81       	ld	r22, Z
    1cb2:	71 81       	ldd	r23, Z+1	; 0x01
    1cb4:	82 81       	ldd	r24, Z+2	; 0x02
    1cb6:	93 81       	ldd	r25, Z+3	; 0x03
    1cb8:	20 e0       	ldi	r18, 0x00	; 0
    1cba:	3f ef       	ldi	r19, 0xFF	; 255
    1cbc:	4f e7       	ldi	r20, 0x7F	; 127
    1cbe:	57 e4       	ldi	r21, 0x47	; 71
    1cc0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1cc4:	18 16       	cp	r1, r24
    1cc6:	0c f0       	brlt	.+2      	; 0x1cca <LCD_displayCharacter+0xbe>
    1cc8:	43 c0       	rjmp	.+134    	; 0x1d50 <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cca:	fe 01       	movw	r30, r28
    1ccc:	e1 5a       	subi	r30, 0xA1	; 161
    1cce:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd0:	60 81       	ld	r22, Z
    1cd2:	71 81       	ldd	r23, Z+1	; 0x01
    1cd4:	82 81       	ldd	r24, Z+2	; 0x02
    1cd6:	93 81       	ldd	r25, Z+3	; 0x03
    1cd8:	20 e0       	ldi	r18, 0x00	; 0
    1cda:	30 e0       	ldi	r19, 0x00	; 0
    1cdc:	40 e2       	ldi	r20, 0x20	; 32
    1cde:	51 e4       	ldi	r21, 0x41	; 65
    1ce0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ce4:	dc 01       	movw	r26, r24
    1ce6:	cb 01       	movw	r24, r22
    1ce8:	8e 01       	movw	r16, r28
    1cea:	07 5a       	subi	r16, 0xA7	; 167
    1cec:	1f 4f       	sbci	r17, 0xFF	; 255
    1cee:	bc 01       	movw	r22, r24
    1cf0:	cd 01       	movw	r24, r26
    1cf2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cf6:	dc 01       	movw	r26, r24
    1cf8:	cb 01       	movw	r24, r22
    1cfa:	f8 01       	movw	r30, r16
    1cfc:	91 83       	std	Z+1, r25	; 0x01
    1cfe:	80 83       	st	Z, r24
    1d00:	1f c0       	rjmp	.+62     	; 0x1d40 <LCD_displayCharacter+0x134>
    1d02:	fe 01       	movw	r30, r28
    1d04:	e9 5a       	subi	r30, 0xA9	; 169
    1d06:	ff 4f       	sbci	r31, 0xFF	; 255
    1d08:	89 e1       	ldi	r24, 0x19	; 25
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	91 83       	std	Z+1, r25	; 0x01
    1d0e:	80 83       	st	Z, r24
    1d10:	fe 01       	movw	r30, r28
    1d12:	e9 5a       	subi	r30, 0xA9	; 169
    1d14:	ff 4f       	sbci	r31, 0xFF	; 255
    1d16:	80 81       	ld	r24, Z
    1d18:	91 81       	ldd	r25, Z+1	; 0x01
    1d1a:	01 97       	sbiw	r24, 0x01	; 1
    1d1c:	f1 f7       	brne	.-4      	; 0x1d1a <LCD_displayCharacter+0x10e>
    1d1e:	fe 01       	movw	r30, r28
    1d20:	e9 5a       	subi	r30, 0xA9	; 169
    1d22:	ff 4f       	sbci	r31, 0xFF	; 255
    1d24:	91 83       	std	Z+1, r25	; 0x01
    1d26:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d28:	de 01       	movw	r26, r28
    1d2a:	a7 5a       	subi	r26, 0xA7	; 167
    1d2c:	bf 4f       	sbci	r27, 0xFF	; 255
    1d2e:	fe 01       	movw	r30, r28
    1d30:	e7 5a       	subi	r30, 0xA7	; 167
    1d32:	ff 4f       	sbci	r31, 0xFF	; 255
    1d34:	80 81       	ld	r24, Z
    1d36:	91 81       	ldd	r25, Z+1	; 0x01
    1d38:	01 97       	sbiw	r24, 0x01	; 1
    1d3a:	11 96       	adiw	r26, 0x01	; 1
    1d3c:	9c 93       	st	X, r25
    1d3e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d40:	fe 01       	movw	r30, r28
    1d42:	e7 5a       	subi	r30, 0xA7	; 167
    1d44:	ff 4f       	sbci	r31, 0xFF	; 255
    1d46:	80 81       	ld	r24, Z
    1d48:	91 81       	ldd	r25, Z+1	; 0x01
    1d4a:	00 97       	sbiw	r24, 0x00	; 0
    1d4c:	d1 f6       	brne	.-76     	; 0x1d02 <LCD_displayCharacter+0xf6>
    1d4e:	27 c0       	rjmp	.+78     	; 0x1d9e <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d50:	8e 01       	movw	r16, r28
    1d52:	07 5a       	subi	r16, 0xA7	; 167
    1d54:	1f 4f       	sbci	r17, 0xFF	; 255
    1d56:	fe 01       	movw	r30, r28
    1d58:	e5 5a       	subi	r30, 0xA5	; 165
    1d5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d5c:	60 81       	ld	r22, Z
    1d5e:	71 81       	ldd	r23, Z+1	; 0x01
    1d60:	82 81       	ldd	r24, Z+2	; 0x02
    1d62:	93 81       	ldd	r25, Z+3	; 0x03
    1d64:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d68:	dc 01       	movw	r26, r24
    1d6a:	cb 01       	movw	r24, r22
    1d6c:	f8 01       	movw	r30, r16
    1d6e:	91 83       	std	Z+1, r25	; 0x01
    1d70:	80 83       	st	Z, r24
    1d72:	de 01       	movw	r26, r28
    1d74:	ab 5a       	subi	r26, 0xAB	; 171
    1d76:	bf 4f       	sbci	r27, 0xFF	; 255
    1d78:	fe 01       	movw	r30, r28
    1d7a:	e7 5a       	subi	r30, 0xA7	; 167
    1d7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d7e:	80 81       	ld	r24, Z
    1d80:	91 81       	ldd	r25, Z+1	; 0x01
    1d82:	8d 93       	st	X+, r24
    1d84:	9c 93       	st	X, r25
    1d86:	fe 01       	movw	r30, r28
    1d88:	eb 5a       	subi	r30, 0xAB	; 171
    1d8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d8c:	80 81       	ld	r24, Z
    1d8e:	91 81       	ldd	r25, Z+1	; 0x01
    1d90:	01 97       	sbiw	r24, 0x01	; 1
    1d92:	f1 f7       	brne	.-4      	; 0x1d90 <LCD_displayCharacter+0x184>
    1d94:	fe 01       	movw	r30, r28
    1d96:	eb 5a       	subi	r30, 0xAB	; 171
    1d98:	ff 4f       	sbci	r31, 0xFF	; 255
    1d9a:	91 83       	std	Z+1, r25	; 0x01
    1d9c:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1d9e:	80 e0       	ldi	r24, 0x00	; 0
    1da0:	62 e0       	ldi	r22, 0x02	; 2
    1da2:	41 e0       	ldi	r20, 0x01	; 1
    1da4:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>
    1da8:	fe 01       	movw	r30, r28
    1daa:	ef 5a       	subi	r30, 0xAF	; 175
    1dac:	ff 4f       	sbci	r31, 0xFF	; 255
    1dae:	80 e0       	ldi	r24, 0x00	; 0
    1db0:	90 e0       	ldi	r25, 0x00	; 0
    1db2:	a0 e8       	ldi	r26, 0x80	; 128
    1db4:	bf e3       	ldi	r27, 0x3F	; 63
    1db6:	80 83       	st	Z, r24
    1db8:	91 83       	std	Z+1, r25	; 0x01
    1dba:	a2 83       	std	Z+2, r26	; 0x02
    1dbc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dbe:	8e 01       	movw	r16, r28
    1dc0:	03 5b       	subi	r16, 0xB3	; 179
    1dc2:	1f 4f       	sbci	r17, 0xFF	; 255
    1dc4:	fe 01       	movw	r30, r28
    1dc6:	ef 5a       	subi	r30, 0xAF	; 175
    1dc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dca:	60 81       	ld	r22, Z
    1dcc:	71 81       	ldd	r23, Z+1	; 0x01
    1dce:	82 81       	ldd	r24, Z+2	; 0x02
    1dd0:	93 81       	ldd	r25, Z+3	; 0x03
    1dd2:	20 e0       	ldi	r18, 0x00	; 0
    1dd4:	30 e0       	ldi	r19, 0x00	; 0
    1dd6:	4a e7       	ldi	r20, 0x7A	; 122
    1dd8:	53 e4       	ldi	r21, 0x43	; 67
    1dda:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dde:	dc 01       	movw	r26, r24
    1de0:	cb 01       	movw	r24, r22
    1de2:	f8 01       	movw	r30, r16
    1de4:	80 83       	st	Z, r24
    1de6:	91 83       	std	Z+1, r25	; 0x01
    1de8:	a2 83       	std	Z+2, r26	; 0x02
    1dea:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1dec:	fe 01       	movw	r30, r28
    1dee:	e3 5b       	subi	r30, 0xB3	; 179
    1df0:	ff 4f       	sbci	r31, 0xFF	; 255
    1df2:	60 81       	ld	r22, Z
    1df4:	71 81       	ldd	r23, Z+1	; 0x01
    1df6:	82 81       	ldd	r24, Z+2	; 0x02
    1df8:	93 81       	ldd	r25, Z+3	; 0x03
    1dfa:	20 e0       	ldi	r18, 0x00	; 0
    1dfc:	30 e0       	ldi	r19, 0x00	; 0
    1dfe:	40 e8       	ldi	r20, 0x80	; 128
    1e00:	5f e3       	ldi	r21, 0x3F	; 63
    1e02:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1e06:	88 23       	and	r24, r24
    1e08:	44 f4       	brge	.+16     	; 0x1e1a <LCD_displayCharacter+0x20e>
		__ticks = 1;
    1e0a:	fe 01       	movw	r30, r28
    1e0c:	e5 5b       	subi	r30, 0xB5	; 181
    1e0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e10:	81 e0       	ldi	r24, 0x01	; 1
    1e12:	90 e0       	ldi	r25, 0x00	; 0
    1e14:	91 83       	std	Z+1, r25	; 0x01
    1e16:	80 83       	st	Z, r24
    1e18:	64 c0       	rjmp	.+200    	; 0x1ee2 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    1e1a:	fe 01       	movw	r30, r28
    1e1c:	e3 5b       	subi	r30, 0xB3	; 179
    1e1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e20:	60 81       	ld	r22, Z
    1e22:	71 81       	ldd	r23, Z+1	; 0x01
    1e24:	82 81       	ldd	r24, Z+2	; 0x02
    1e26:	93 81       	ldd	r25, Z+3	; 0x03
    1e28:	20 e0       	ldi	r18, 0x00	; 0
    1e2a:	3f ef       	ldi	r19, 0xFF	; 255
    1e2c:	4f e7       	ldi	r20, 0x7F	; 127
    1e2e:	57 e4       	ldi	r21, 0x47	; 71
    1e30:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1e34:	18 16       	cp	r1, r24
    1e36:	0c f0       	brlt	.+2      	; 0x1e3a <LCD_displayCharacter+0x22e>
    1e38:	43 c0       	rjmp	.+134    	; 0x1ec0 <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e3a:	fe 01       	movw	r30, r28
    1e3c:	ef 5a       	subi	r30, 0xAF	; 175
    1e3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e40:	60 81       	ld	r22, Z
    1e42:	71 81       	ldd	r23, Z+1	; 0x01
    1e44:	82 81       	ldd	r24, Z+2	; 0x02
    1e46:	93 81       	ldd	r25, Z+3	; 0x03
    1e48:	20 e0       	ldi	r18, 0x00	; 0
    1e4a:	30 e0       	ldi	r19, 0x00	; 0
    1e4c:	40 e2       	ldi	r20, 0x20	; 32
    1e4e:	51 e4       	ldi	r21, 0x41	; 65
    1e50:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e54:	dc 01       	movw	r26, r24
    1e56:	cb 01       	movw	r24, r22
    1e58:	8e 01       	movw	r16, r28
    1e5a:	05 5b       	subi	r16, 0xB5	; 181
    1e5c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e5e:	bc 01       	movw	r22, r24
    1e60:	cd 01       	movw	r24, r26
    1e62:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e66:	dc 01       	movw	r26, r24
    1e68:	cb 01       	movw	r24, r22
    1e6a:	f8 01       	movw	r30, r16
    1e6c:	91 83       	std	Z+1, r25	; 0x01
    1e6e:	80 83       	st	Z, r24
    1e70:	1f c0       	rjmp	.+62     	; 0x1eb0 <LCD_displayCharacter+0x2a4>
    1e72:	fe 01       	movw	r30, r28
    1e74:	e7 5b       	subi	r30, 0xB7	; 183
    1e76:	ff 4f       	sbci	r31, 0xFF	; 255
    1e78:	89 e1       	ldi	r24, 0x19	; 25
    1e7a:	90 e0       	ldi	r25, 0x00	; 0
    1e7c:	91 83       	std	Z+1, r25	; 0x01
    1e7e:	80 83       	st	Z, r24
    1e80:	fe 01       	movw	r30, r28
    1e82:	e7 5b       	subi	r30, 0xB7	; 183
    1e84:	ff 4f       	sbci	r31, 0xFF	; 255
    1e86:	80 81       	ld	r24, Z
    1e88:	91 81       	ldd	r25, Z+1	; 0x01
    1e8a:	01 97       	sbiw	r24, 0x01	; 1
    1e8c:	f1 f7       	brne	.-4      	; 0x1e8a <LCD_displayCharacter+0x27e>
    1e8e:	fe 01       	movw	r30, r28
    1e90:	e7 5b       	subi	r30, 0xB7	; 183
    1e92:	ff 4f       	sbci	r31, 0xFF	; 255
    1e94:	91 83       	std	Z+1, r25	; 0x01
    1e96:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e98:	de 01       	movw	r26, r28
    1e9a:	a5 5b       	subi	r26, 0xB5	; 181
    1e9c:	bf 4f       	sbci	r27, 0xFF	; 255
    1e9e:	fe 01       	movw	r30, r28
    1ea0:	e5 5b       	subi	r30, 0xB5	; 181
    1ea2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea4:	80 81       	ld	r24, Z
    1ea6:	91 81       	ldd	r25, Z+1	; 0x01
    1ea8:	01 97       	sbiw	r24, 0x01	; 1
    1eaa:	11 96       	adiw	r26, 0x01	; 1
    1eac:	9c 93       	st	X, r25
    1eae:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eb0:	fe 01       	movw	r30, r28
    1eb2:	e5 5b       	subi	r30, 0xB5	; 181
    1eb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb6:	80 81       	ld	r24, Z
    1eb8:	91 81       	ldd	r25, Z+1	; 0x01
    1eba:	00 97       	sbiw	r24, 0x00	; 0
    1ebc:	d1 f6       	brne	.-76     	; 0x1e72 <LCD_displayCharacter+0x266>
    1ebe:	27 c0       	rjmp	.+78     	; 0x1f0e <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ec0:	8e 01       	movw	r16, r28
    1ec2:	05 5b       	subi	r16, 0xB5	; 181
    1ec4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ec6:	fe 01       	movw	r30, r28
    1ec8:	e3 5b       	subi	r30, 0xB3	; 179
    1eca:	ff 4f       	sbci	r31, 0xFF	; 255
    1ecc:	60 81       	ld	r22, Z
    1ece:	71 81       	ldd	r23, Z+1	; 0x01
    1ed0:	82 81       	ldd	r24, Z+2	; 0x02
    1ed2:	93 81       	ldd	r25, Z+3	; 0x03
    1ed4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ed8:	dc 01       	movw	r26, r24
    1eda:	cb 01       	movw	r24, r22
    1edc:	f8 01       	movw	r30, r16
    1ede:	91 83       	std	Z+1, r25	; 0x01
    1ee0:	80 83       	st	Z, r24
    1ee2:	de 01       	movw	r26, r28
    1ee4:	a9 5b       	subi	r26, 0xB9	; 185
    1ee6:	bf 4f       	sbci	r27, 0xFF	; 255
    1ee8:	fe 01       	movw	r30, r28
    1eea:	e5 5b       	subi	r30, 0xB5	; 181
    1eec:	ff 4f       	sbci	r31, 0xFF	; 255
    1eee:	80 81       	ld	r24, Z
    1ef0:	91 81       	ldd	r25, Z+1	; 0x01
    1ef2:	8d 93       	st	X+, r24
    1ef4:	9c 93       	st	X, r25
    1ef6:	fe 01       	movw	r30, r28
    1ef8:	e9 5b       	subi	r30, 0xB9	; 185
    1efa:	ff 4f       	sbci	r31, 0xFF	; 255
    1efc:	80 81       	ld	r24, Z
    1efe:	91 81       	ldd	r25, Z+1	; 0x01
    1f00:	01 97       	sbiw	r24, 0x01	; 1
    1f02:	f1 f7       	brne	.-4      	; 0x1f00 <LCD_displayCharacter+0x2f4>
    1f04:	fe 01       	movw	r30, r28
    1f06:	e9 5b       	subi	r30, 0xB9	; 185
    1f08:	ff 4f       	sbci	r31, 0xFF	; 255
    1f0a:	91 83       	std	Z+1, r25	; 0x01
    1f0c:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    1f0e:	fe 01       	movw	r30, r28
    1f10:	ed 59       	subi	r30, 0x9D	; 157
    1f12:	ff 4f       	sbci	r31, 0xFF	; 255
    1f14:	80 81       	ld	r24, Z
    1f16:	88 2f       	mov	r24, r24
    1f18:	90 e0       	ldi	r25, 0x00	; 0
    1f1a:	80 71       	andi	r24, 0x10	; 16
    1f1c:	90 70       	andi	r25, 0x00	; 0
    1f1e:	95 95       	asr	r25
    1f20:	87 95       	ror	r24
    1f22:	95 95       	asr	r25
    1f24:	87 95       	ror	r24
    1f26:	95 95       	asr	r25
    1f28:	87 95       	ror	r24
    1f2a:	95 95       	asr	r25
    1f2c:	87 95       	ror	r24
    1f2e:	98 2f       	mov	r25, r24
    1f30:	80 e0       	ldi	r24, 0x00	; 0
    1f32:	63 e0       	ldi	r22, 0x03	; 3
    1f34:	49 2f       	mov	r20, r25
    1f36:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    1f3a:	fe 01       	movw	r30, r28
    1f3c:	ed 59       	subi	r30, 0x9D	; 157
    1f3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f40:	80 81       	ld	r24, Z
    1f42:	88 2f       	mov	r24, r24
    1f44:	90 e0       	ldi	r25, 0x00	; 0
    1f46:	80 72       	andi	r24, 0x20	; 32
    1f48:	90 70       	andi	r25, 0x00	; 0
    1f4a:	95 95       	asr	r25
    1f4c:	87 95       	ror	r24
    1f4e:	95 95       	asr	r25
    1f50:	87 95       	ror	r24
    1f52:	95 95       	asr	r25
    1f54:	87 95       	ror	r24
    1f56:	95 95       	asr	r25
    1f58:	87 95       	ror	r24
    1f5a:	95 95       	asr	r25
    1f5c:	87 95       	ror	r24
    1f5e:	98 2f       	mov	r25, r24
    1f60:	80 e0       	ldi	r24, 0x00	; 0
    1f62:	64 e0       	ldi	r22, 0x04	; 4
    1f64:	49 2f       	mov	r20, r25
    1f66:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    1f6a:	fe 01       	movw	r30, r28
    1f6c:	ed 59       	subi	r30, 0x9D	; 157
    1f6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f70:	80 81       	ld	r24, Z
    1f72:	88 2f       	mov	r24, r24
    1f74:	90 e0       	ldi	r25, 0x00	; 0
    1f76:	80 74       	andi	r24, 0x40	; 64
    1f78:	90 70       	andi	r25, 0x00	; 0
    1f7a:	08 2e       	mov	r0, r24
    1f7c:	89 2f       	mov	r24, r25
    1f7e:	00 0c       	add	r0, r0
    1f80:	88 1f       	adc	r24, r24
    1f82:	99 0b       	sbc	r25, r25
    1f84:	00 0c       	add	r0, r0
    1f86:	88 1f       	adc	r24, r24
    1f88:	99 1f       	adc	r25, r25
    1f8a:	98 2f       	mov	r25, r24
    1f8c:	80 e0       	ldi	r24, 0x00	; 0
    1f8e:	65 e0       	ldi	r22, 0x05	; 5
    1f90:	49 2f       	mov	r20, r25
    1f92:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    1f96:	fe 01       	movw	r30, r28
    1f98:	ed 59       	subi	r30, 0x9D	; 157
    1f9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f9c:	80 81       	ld	r24, Z
    1f9e:	98 2f       	mov	r25, r24
    1fa0:	99 1f       	adc	r25, r25
    1fa2:	99 27       	eor	r25, r25
    1fa4:	99 1f       	adc	r25, r25
    1fa6:	80 e0       	ldi	r24, 0x00	; 0
    1fa8:	66 e0       	ldi	r22, 0x06	; 6
    1faa:	49 2f       	mov	r20, r25
    1fac:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>
    1fb0:	fe 01       	movw	r30, r28
    1fb2:	ed 5b       	subi	r30, 0xBD	; 189
    1fb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb6:	80 e0       	ldi	r24, 0x00	; 0
    1fb8:	90 e0       	ldi	r25, 0x00	; 0
    1fba:	a0 e8       	ldi	r26, 0x80	; 128
    1fbc:	bf e3       	ldi	r27, 0x3F	; 63
    1fbe:	80 83       	st	Z, r24
    1fc0:	91 83       	std	Z+1, r25	; 0x01
    1fc2:	a2 83       	std	Z+2, r26	; 0x02
    1fc4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fc6:	8e 01       	movw	r16, r28
    1fc8:	01 5c       	subi	r16, 0xC1	; 193
    1fca:	1f 4f       	sbci	r17, 0xFF	; 255
    1fcc:	fe 01       	movw	r30, r28
    1fce:	ed 5b       	subi	r30, 0xBD	; 189
    1fd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd2:	60 81       	ld	r22, Z
    1fd4:	71 81       	ldd	r23, Z+1	; 0x01
    1fd6:	82 81       	ldd	r24, Z+2	; 0x02
    1fd8:	93 81       	ldd	r25, Z+3	; 0x03
    1fda:	20 e0       	ldi	r18, 0x00	; 0
    1fdc:	30 e0       	ldi	r19, 0x00	; 0
    1fde:	4a e7       	ldi	r20, 0x7A	; 122
    1fe0:	53 e4       	ldi	r21, 0x43	; 67
    1fe2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fe6:	dc 01       	movw	r26, r24
    1fe8:	cb 01       	movw	r24, r22
    1fea:	f8 01       	movw	r30, r16
    1fec:	80 83       	st	Z, r24
    1fee:	91 83       	std	Z+1, r25	; 0x01
    1ff0:	a2 83       	std	Z+2, r26	; 0x02
    1ff2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ff4:	fe 01       	movw	r30, r28
    1ff6:	ff 96       	adiw	r30, 0x3f	; 63
    1ff8:	60 81       	ld	r22, Z
    1ffa:	71 81       	ldd	r23, Z+1	; 0x01
    1ffc:	82 81       	ldd	r24, Z+2	; 0x02
    1ffe:	93 81       	ldd	r25, Z+3	; 0x03
    2000:	20 e0       	ldi	r18, 0x00	; 0
    2002:	30 e0       	ldi	r19, 0x00	; 0
    2004:	40 e8       	ldi	r20, 0x80	; 128
    2006:	5f e3       	ldi	r21, 0x3F	; 63
    2008:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    200c:	88 23       	and	r24, r24
    200e:	2c f4       	brge	.+10     	; 0x201a <LCD_displayCharacter+0x40e>
		__ticks = 1;
    2010:	81 e0       	ldi	r24, 0x01	; 1
    2012:	90 e0       	ldi	r25, 0x00	; 0
    2014:	9e af       	std	Y+62, r25	; 0x3e
    2016:	8d af       	std	Y+61, r24	; 0x3d
    2018:	46 c0       	rjmp	.+140    	; 0x20a6 <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    201a:	fe 01       	movw	r30, r28
    201c:	ff 96       	adiw	r30, 0x3f	; 63
    201e:	60 81       	ld	r22, Z
    2020:	71 81       	ldd	r23, Z+1	; 0x01
    2022:	82 81       	ldd	r24, Z+2	; 0x02
    2024:	93 81       	ldd	r25, Z+3	; 0x03
    2026:	20 e0       	ldi	r18, 0x00	; 0
    2028:	3f ef       	ldi	r19, 0xFF	; 255
    202a:	4f e7       	ldi	r20, 0x7F	; 127
    202c:	57 e4       	ldi	r21, 0x47	; 71
    202e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2032:	18 16       	cp	r1, r24
    2034:	64 f5       	brge	.+88     	; 0x208e <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2036:	fe 01       	movw	r30, r28
    2038:	ed 5b       	subi	r30, 0xBD	; 189
    203a:	ff 4f       	sbci	r31, 0xFF	; 255
    203c:	60 81       	ld	r22, Z
    203e:	71 81       	ldd	r23, Z+1	; 0x01
    2040:	82 81       	ldd	r24, Z+2	; 0x02
    2042:	93 81       	ldd	r25, Z+3	; 0x03
    2044:	20 e0       	ldi	r18, 0x00	; 0
    2046:	30 e0       	ldi	r19, 0x00	; 0
    2048:	40 e2       	ldi	r20, 0x20	; 32
    204a:	51 e4       	ldi	r21, 0x41	; 65
    204c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2050:	dc 01       	movw	r26, r24
    2052:	cb 01       	movw	r24, r22
    2054:	bc 01       	movw	r22, r24
    2056:	cd 01       	movw	r24, r26
    2058:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    205c:	dc 01       	movw	r26, r24
    205e:	cb 01       	movw	r24, r22
    2060:	9e af       	std	Y+62, r25	; 0x3e
    2062:	8d af       	std	Y+61, r24	; 0x3d
    2064:	0f c0       	rjmp	.+30     	; 0x2084 <LCD_displayCharacter+0x478>
    2066:	89 e1       	ldi	r24, 0x19	; 25
    2068:	90 e0       	ldi	r25, 0x00	; 0
    206a:	9c af       	std	Y+60, r25	; 0x3c
    206c:	8b af       	std	Y+59, r24	; 0x3b
    206e:	8b ad       	ldd	r24, Y+59	; 0x3b
    2070:	9c ad       	ldd	r25, Y+60	; 0x3c
    2072:	01 97       	sbiw	r24, 0x01	; 1
    2074:	f1 f7       	brne	.-4      	; 0x2072 <LCD_displayCharacter+0x466>
    2076:	9c af       	std	Y+60, r25	; 0x3c
    2078:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    207a:	8d ad       	ldd	r24, Y+61	; 0x3d
    207c:	9e ad       	ldd	r25, Y+62	; 0x3e
    207e:	01 97       	sbiw	r24, 0x01	; 1
    2080:	9e af       	std	Y+62, r25	; 0x3e
    2082:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2084:	8d ad       	ldd	r24, Y+61	; 0x3d
    2086:	9e ad       	ldd	r25, Y+62	; 0x3e
    2088:	00 97       	sbiw	r24, 0x00	; 0
    208a:	69 f7       	brne	.-38     	; 0x2066 <LCD_displayCharacter+0x45a>
    208c:	16 c0       	rjmp	.+44     	; 0x20ba <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    208e:	fe 01       	movw	r30, r28
    2090:	ff 96       	adiw	r30, 0x3f	; 63
    2092:	60 81       	ld	r22, Z
    2094:	71 81       	ldd	r23, Z+1	; 0x01
    2096:	82 81       	ldd	r24, Z+2	; 0x02
    2098:	93 81       	ldd	r25, Z+3	; 0x03
    209a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    209e:	dc 01       	movw	r26, r24
    20a0:	cb 01       	movw	r24, r22
    20a2:	9e af       	std	Y+62, r25	; 0x3e
    20a4:	8d af       	std	Y+61, r24	; 0x3d
    20a6:	8d ad       	ldd	r24, Y+61	; 0x3d
    20a8:	9e ad       	ldd	r25, Y+62	; 0x3e
    20aa:	9a af       	std	Y+58, r25	; 0x3a
    20ac:	89 af       	std	Y+57, r24	; 0x39
    20ae:	89 ad       	ldd	r24, Y+57	; 0x39
    20b0:	9a ad       	ldd	r25, Y+58	; 0x3a
    20b2:	01 97       	sbiw	r24, 0x01	; 1
    20b4:	f1 f7       	brne	.-4      	; 0x20b2 <LCD_displayCharacter+0x4a6>
    20b6:	9a af       	std	Y+58, r25	; 0x3a
    20b8:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    20ba:	80 e0       	ldi	r24, 0x00	; 0
    20bc:	62 e0       	ldi	r22, 0x02	; 2
    20be:	40 e0       	ldi	r20, 0x00	; 0
    20c0:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>
    20c4:	80 e0       	ldi	r24, 0x00	; 0
    20c6:	90 e0       	ldi	r25, 0x00	; 0
    20c8:	a0 e8       	ldi	r26, 0x80	; 128
    20ca:	bf e3       	ldi	r27, 0x3F	; 63
    20cc:	8d ab       	std	Y+53, r24	; 0x35
    20ce:	9e ab       	std	Y+54, r25	; 0x36
    20d0:	af ab       	std	Y+55, r26	; 0x37
    20d2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20d4:	6d a9       	ldd	r22, Y+53	; 0x35
    20d6:	7e a9       	ldd	r23, Y+54	; 0x36
    20d8:	8f a9       	ldd	r24, Y+55	; 0x37
    20da:	98 ad       	ldd	r25, Y+56	; 0x38
    20dc:	20 e0       	ldi	r18, 0x00	; 0
    20de:	30 e0       	ldi	r19, 0x00	; 0
    20e0:	4a e7       	ldi	r20, 0x7A	; 122
    20e2:	53 e4       	ldi	r21, 0x43	; 67
    20e4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20e8:	dc 01       	movw	r26, r24
    20ea:	cb 01       	movw	r24, r22
    20ec:	89 ab       	std	Y+49, r24	; 0x31
    20ee:	9a ab       	std	Y+50, r25	; 0x32
    20f0:	ab ab       	std	Y+51, r26	; 0x33
    20f2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    20f4:	69 a9       	ldd	r22, Y+49	; 0x31
    20f6:	7a a9       	ldd	r23, Y+50	; 0x32
    20f8:	8b a9       	ldd	r24, Y+51	; 0x33
    20fa:	9c a9       	ldd	r25, Y+52	; 0x34
    20fc:	20 e0       	ldi	r18, 0x00	; 0
    20fe:	30 e0       	ldi	r19, 0x00	; 0
    2100:	40 e8       	ldi	r20, 0x80	; 128
    2102:	5f e3       	ldi	r21, 0x3F	; 63
    2104:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2108:	88 23       	and	r24, r24
    210a:	2c f4       	brge	.+10     	; 0x2116 <LCD_displayCharacter+0x50a>
		__ticks = 1;
    210c:	81 e0       	ldi	r24, 0x01	; 1
    210e:	90 e0       	ldi	r25, 0x00	; 0
    2110:	98 ab       	std	Y+48, r25	; 0x30
    2112:	8f a7       	std	Y+47, r24	; 0x2f
    2114:	3f c0       	rjmp	.+126    	; 0x2194 <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    2116:	69 a9       	ldd	r22, Y+49	; 0x31
    2118:	7a a9       	ldd	r23, Y+50	; 0x32
    211a:	8b a9       	ldd	r24, Y+51	; 0x33
    211c:	9c a9       	ldd	r25, Y+52	; 0x34
    211e:	20 e0       	ldi	r18, 0x00	; 0
    2120:	3f ef       	ldi	r19, 0xFF	; 255
    2122:	4f e7       	ldi	r20, 0x7F	; 127
    2124:	57 e4       	ldi	r21, 0x47	; 71
    2126:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    212a:	18 16       	cp	r1, r24
    212c:	4c f5       	brge	.+82     	; 0x2180 <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    212e:	6d a9       	ldd	r22, Y+53	; 0x35
    2130:	7e a9       	ldd	r23, Y+54	; 0x36
    2132:	8f a9       	ldd	r24, Y+55	; 0x37
    2134:	98 ad       	ldd	r25, Y+56	; 0x38
    2136:	20 e0       	ldi	r18, 0x00	; 0
    2138:	30 e0       	ldi	r19, 0x00	; 0
    213a:	40 e2       	ldi	r20, 0x20	; 32
    213c:	51 e4       	ldi	r21, 0x41	; 65
    213e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2142:	dc 01       	movw	r26, r24
    2144:	cb 01       	movw	r24, r22
    2146:	bc 01       	movw	r22, r24
    2148:	cd 01       	movw	r24, r26
    214a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    214e:	dc 01       	movw	r26, r24
    2150:	cb 01       	movw	r24, r22
    2152:	98 ab       	std	Y+48, r25	; 0x30
    2154:	8f a7       	std	Y+47, r24	; 0x2f
    2156:	0f c0       	rjmp	.+30     	; 0x2176 <LCD_displayCharacter+0x56a>
    2158:	89 e1       	ldi	r24, 0x19	; 25
    215a:	90 e0       	ldi	r25, 0x00	; 0
    215c:	9e a7       	std	Y+46, r25	; 0x2e
    215e:	8d a7       	std	Y+45, r24	; 0x2d
    2160:	8d a5       	ldd	r24, Y+45	; 0x2d
    2162:	9e a5       	ldd	r25, Y+46	; 0x2e
    2164:	01 97       	sbiw	r24, 0x01	; 1
    2166:	f1 f7       	brne	.-4      	; 0x2164 <LCD_displayCharacter+0x558>
    2168:	9e a7       	std	Y+46, r25	; 0x2e
    216a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    216c:	8f a5       	ldd	r24, Y+47	; 0x2f
    216e:	98 a9       	ldd	r25, Y+48	; 0x30
    2170:	01 97       	sbiw	r24, 0x01	; 1
    2172:	98 ab       	std	Y+48, r25	; 0x30
    2174:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2176:	8f a5       	ldd	r24, Y+47	; 0x2f
    2178:	98 a9       	ldd	r25, Y+48	; 0x30
    217a:	00 97       	sbiw	r24, 0x00	; 0
    217c:	69 f7       	brne	.-38     	; 0x2158 <LCD_displayCharacter+0x54c>
    217e:	14 c0       	rjmp	.+40     	; 0x21a8 <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2180:	69 a9       	ldd	r22, Y+49	; 0x31
    2182:	7a a9       	ldd	r23, Y+50	; 0x32
    2184:	8b a9       	ldd	r24, Y+51	; 0x33
    2186:	9c a9       	ldd	r25, Y+52	; 0x34
    2188:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    218c:	dc 01       	movw	r26, r24
    218e:	cb 01       	movw	r24, r22
    2190:	98 ab       	std	Y+48, r25	; 0x30
    2192:	8f a7       	std	Y+47, r24	; 0x2f
    2194:	8f a5       	ldd	r24, Y+47	; 0x2f
    2196:	98 a9       	ldd	r25, Y+48	; 0x30
    2198:	9c a7       	std	Y+44, r25	; 0x2c
    219a:	8b a7       	std	Y+43, r24	; 0x2b
    219c:	8b a5       	ldd	r24, Y+43	; 0x2b
    219e:	9c a5       	ldd	r25, Y+44	; 0x2c
    21a0:	01 97       	sbiw	r24, 0x01	; 1
    21a2:	f1 f7       	brne	.-4      	; 0x21a0 <LCD_displayCharacter+0x594>
    21a4:	9c a7       	std	Y+44, r25	; 0x2c
    21a6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    21a8:	80 e0       	ldi	r24, 0x00	; 0
    21aa:	62 e0       	ldi	r22, 0x02	; 2
    21ac:	41 e0       	ldi	r20, 0x01	; 1
    21ae:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>
    21b2:	80 e0       	ldi	r24, 0x00	; 0
    21b4:	90 e0       	ldi	r25, 0x00	; 0
    21b6:	a0 e8       	ldi	r26, 0x80	; 128
    21b8:	bf e3       	ldi	r27, 0x3F	; 63
    21ba:	8f a3       	std	Y+39, r24	; 0x27
    21bc:	98 a7       	std	Y+40, r25	; 0x28
    21be:	a9 a7       	std	Y+41, r26	; 0x29
    21c0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21c2:	6f a1       	ldd	r22, Y+39	; 0x27
    21c4:	78 a5       	ldd	r23, Y+40	; 0x28
    21c6:	89 a5       	ldd	r24, Y+41	; 0x29
    21c8:	9a a5       	ldd	r25, Y+42	; 0x2a
    21ca:	20 e0       	ldi	r18, 0x00	; 0
    21cc:	30 e0       	ldi	r19, 0x00	; 0
    21ce:	4a e7       	ldi	r20, 0x7A	; 122
    21d0:	53 e4       	ldi	r21, 0x43	; 67
    21d2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21d6:	dc 01       	movw	r26, r24
    21d8:	cb 01       	movw	r24, r22
    21da:	8b a3       	std	Y+35, r24	; 0x23
    21dc:	9c a3       	std	Y+36, r25	; 0x24
    21de:	ad a3       	std	Y+37, r26	; 0x25
    21e0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    21e2:	6b a1       	ldd	r22, Y+35	; 0x23
    21e4:	7c a1       	ldd	r23, Y+36	; 0x24
    21e6:	8d a1       	ldd	r24, Y+37	; 0x25
    21e8:	9e a1       	ldd	r25, Y+38	; 0x26
    21ea:	20 e0       	ldi	r18, 0x00	; 0
    21ec:	30 e0       	ldi	r19, 0x00	; 0
    21ee:	40 e8       	ldi	r20, 0x80	; 128
    21f0:	5f e3       	ldi	r21, 0x3F	; 63
    21f2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    21f6:	88 23       	and	r24, r24
    21f8:	2c f4       	brge	.+10     	; 0x2204 <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    21fa:	81 e0       	ldi	r24, 0x01	; 1
    21fc:	90 e0       	ldi	r25, 0x00	; 0
    21fe:	9a a3       	std	Y+34, r25	; 0x22
    2200:	89 a3       	std	Y+33, r24	; 0x21
    2202:	3f c0       	rjmp	.+126    	; 0x2282 <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    2204:	6b a1       	ldd	r22, Y+35	; 0x23
    2206:	7c a1       	ldd	r23, Y+36	; 0x24
    2208:	8d a1       	ldd	r24, Y+37	; 0x25
    220a:	9e a1       	ldd	r25, Y+38	; 0x26
    220c:	20 e0       	ldi	r18, 0x00	; 0
    220e:	3f ef       	ldi	r19, 0xFF	; 255
    2210:	4f e7       	ldi	r20, 0x7F	; 127
    2212:	57 e4       	ldi	r21, 0x47	; 71
    2214:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2218:	18 16       	cp	r1, r24
    221a:	4c f5       	brge	.+82     	; 0x226e <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    221c:	6f a1       	ldd	r22, Y+39	; 0x27
    221e:	78 a5       	ldd	r23, Y+40	; 0x28
    2220:	89 a5       	ldd	r24, Y+41	; 0x29
    2222:	9a a5       	ldd	r25, Y+42	; 0x2a
    2224:	20 e0       	ldi	r18, 0x00	; 0
    2226:	30 e0       	ldi	r19, 0x00	; 0
    2228:	40 e2       	ldi	r20, 0x20	; 32
    222a:	51 e4       	ldi	r21, 0x41	; 65
    222c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2230:	dc 01       	movw	r26, r24
    2232:	cb 01       	movw	r24, r22
    2234:	bc 01       	movw	r22, r24
    2236:	cd 01       	movw	r24, r26
    2238:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    223c:	dc 01       	movw	r26, r24
    223e:	cb 01       	movw	r24, r22
    2240:	9a a3       	std	Y+34, r25	; 0x22
    2242:	89 a3       	std	Y+33, r24	; 0x21
    2244:	0f c0       	rjmp	.+30     	; 0x2264 <LCD_displayCharacter+0x658>
    2246:	89 e1       	ldi	r24, 0x19	; 25
    2248:	90 e0       	ldi	r25, 0x00	; 0
    224a:	98 a3       	std	Y+32, r25	; 0x20
    224c:	8f 8f       	std	Y+31, r24	; 0x1f
    224e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2250:	98 a1       	ldd	r25, Y+32	; 0x20
    2252:	01 97       	sbiw	r24, 0x01	; 1
    2254:	f1 f7       	brne	.-4      	; 0x2252 <LCD_displayCharacter+0x646>
    2256:	98 a3       	std	Y+32, r25	; 0x20
    2258:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    225a:	89 a1       	ldd	r24, Y+33	; 0x21
    225c:	9a a1       	ldd	r25, Y+34	; 0x22
    225e:	01 97       	sbiw	r24, 0x01	; 1
    2260:	9a a3       	std	Y+34, r25	; 0x22
    2262:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2264:	89 a1       	ldd	r24, Y+33	; 0x21
    2266:	9a a1       	ldd	r25, Y+34	; 0x22
    2268:	00 97       	sbiw	r24, 0x00	; 0
    226a:	69 f7       	brne	.-38     	; 0x2246 <LCD_displayCharacter+0x63a>
    226c:	14 c0       	rjmp	.+40     	; 0x2296 <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    226e:	6b a1       	ldd	r22, Y+35	; 0x23
    2270:	7c a1       	ldd	r23, Y+36	; 0x24
    2272:	8d a1       	ldd	r24, Y+37	; 0x25
    2274:	9e a1       	ldd	r25, Y+38	; 0x26
    2276:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    227a:	dc 01       	movw	r26, r24
    227c:	cb 01       	movw	r24, r22
    227e:	9a a3       	std	Y+34, r25	; 0x22
    2280:	89 a3       	std	Y+33, r24	; 0x21
    2282:	89 a1       	ldd	r24, Y+33	; 0x21
    2284:	9a a1       	ldd	r25, Y+34	; 0x22
    2286:	9e 8f       	std	Y+30, r25	; 0x1e
    2288:	8d 8f       	std	Y+29, r24	; 0x1d
    228a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    228c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    228e:	01 97       	sbiw	r24, 0x01	; 1
    2290:	f1 f7       	brne	.-4      	; 0x228e <LCD_displayCharacter+0x682>
    2292:	9e 8f       	std	Y+30, r25	; 0x1e
    2294:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    2296:	fe 01       	movw	r30, r28
    2298:	ed 59       	subi	r30, 0x9D	; 157
    229a:	ff 4f       	sbci	r31, 0xFF	; 255
    229c:	80 81       	ld	r24, Z
    229e:	98 2f       	mov	r25, r24
    22a0:	91 70       	andi	r25, 0x01	; 1
    22a2:	80 e0       	ldi	r24, 0x00	; 0
    22a4:	63 e0       	ldi	r22, 0x03	; 3
    22a6:	49 2f       	mov	r20, r25
    22a8:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    22ac:	fe 01       	movw	r30, r28
    22ae:	ed 59       	subi	r30, 0x9D	; 157
    22b0:	ff 4f       	sbci	r31, 0xFF	; 255
    22b2:	80 81       	ld	r24, Z
    22b4:	88 2f       	mov	r24, r24
    22b6:	90 e0       	ldi	r25, 0x00	; 0
    22b8:	82 70       	andi	r24, 0x02	; 2
    22ba:	90 70       	andi	r25, 0x00	; 0
    22bc:	95 95       	asr	r25
    22be:	87 95       	ror	r24
    22c0:	98 2f       	mov	r25, r24
    22c2:	80 e0       	ldi	r24, 0x00	; 0
    22c4:	64 e0       	ldi	r22, 0x04	; 4
    22c6:	49 2f       	mov	r20, r25
    22c8:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    22cc:	fe 01       	movw	r30, r28
    22ce:	ed 59       	subi	r30, 0x9D	; 157
    22d0:	ff 4f       	sbci	r31, 0xFF	; 255
    22d2:	80 81       	ld	r24, Z
    22d4:	88 2f       	mov	r24, r24
    22d6:	90 e0       	ldi	r25, 0x00	; 0
    22d8:	84 70       	andi	r24, 0x04	; 4
    22da:	90 70       	andi	r25, 0x00	; 0
    22dc:	95 95       	asr	r25
    22de:	87 95       	ror	r24
    22e0:	95 95       	asr	r25
    22e2:	87 95       	ror	r24
    22e4:	98 2f       	mov	r25, r24
    22e6:	80 e0       	ldi	r24, 0x00	; 0
    22e8:	65 e0       	ldi	r22, 0x05	; 5
    22ea:	49 2f       	mov	r20, r25
    22ec:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    22f0:	fe 01       	movw	r30, r28
    22f2:	ed 59       	subi	r30, 0x9D	; 157
    22f4:	ff 4f       	sbci	r31, 0xFF	; 255
    22f6:	80 81       	ld	r24, Z
    22f8:	88 2f       	mov	r24, r24
    22fa:	90 e0       	ldi	r25, 0x00	; 0
    22fc:	88 70       	andi	r24, 0x08	; 8
    22fe:	90 70       	andi	r25, 0x00	; 0
    2300:	95 95       	asr	r25
    2302:	87 95       	ror	r24
    2304:	95 95       	asr	r25
    2306:	87 95       	ror	r24
    2308:	95 95       	asr	r25
    230a:	87 95       	ror	r24
    230c:	98 2f       	mov	r25, r24
    230e:	80 e0       	ldi	r24, 0x00	; 0
    2310:	66 e0       	ldi	r22, 0x06	; 6
    2312:	49 2f       	mov	r20, r25
    2314:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>
    2318:	80 e0       	ldi	r24, 0x00	; 0
    231a:	90 e0       	ldi	r25, 0x00	; 0
    231c:	a0 e8       	ldi	r26, 0x80	; 128
    231e:	bf e3       	ldi	r27, 0x3F	; 63
    2320:	89 8f       	std	Y+25, r24	; 0x19
    2322:	9a 8f       	std	Y+26, r25	; 0x1a
    2324:	ab 8f       	std	Y+27, r26	; 0x1b
    2326:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2328:	69 8d       	ldd	r22, Y+25	; 0x19
    232a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    232c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    232e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2330:	20 e0       	ldi	r18, 0x00	; 0
    2332:	30 e0       	ldi	r19, 0x00	; 0
    2334:	4a e7       	ldi	r20, 0x7A	; 122
    2336:	53 e4       	ldi	r21, 0x43	; 67
    2338:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    233c:	dc 01       	movw	r26, r24
    233e:	cb 01       	movw	r24, r22
    2340:	8d 8b       	std	Y+21, r24	; 0x15
    2342:	9e 8b       	std	Y+22, r25	; 0x16
    2344:	af 8b       	std	Y+23, r26	; 0x17
    2346:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2348:	6d 89       	ldd	r22, Y+21	; 0x15
    234a:	7e 89       	ldd	r23, Y+22	; 0x16
    234c:	8f 89       	ldd	r24, Y+23	; 0x17
    234e:	98 8d       	ldd	r25, Y+24	; 0x18
    2350:	20 e0       	ldi	r18, 0x00	; 0
    2352:	30 e0       	ldi	r19, 0x00	; 0
    2354:	40 e8       	ldi	r20, 0x80	; 128
    2356:	5f e3       	ldi	r21, 0x3F	; 63
    2358:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    235c:	88 23       	and	r24, r24
    235e:	2c f4       	brge	.+10     	; 0x236a <LCD_displayCharacter+0x75e>
		__ticks = 1;
    2360:	81 e0       	ldi	r24, 0x01	; 1
    2362:	90 e0       	ldi	r25, 0x00	; 0
    2364:	9c 8b       	std	Y+20, r25	; 0x14
    2366:	8b 8b       	std	Y+19, r24	; 0x13
    2368:	3f c0       	rjmp	.+126    	; 0x23e8 <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    236a:	6d 89       	ldd	r22, Y+21	; 0x15
    236c:	7e 89       	ldd	r23, Y+22	; 0x16
    236e:	8f 89       	ldd	r24, Y+23	; 0x17
    2370:	98 8d       	ldd	r25, Y+24	; 0x18
    2372:	20 e0       	ldi	r18, 0x00	; 0
    2374:	3f ef       	ldi	r19, 0xFF	; 255
    2376:	4f e7       	ldi	r20, 0x7F	; 127
    2378:	57 e4       	ldi	r21, 0x47	; 71
    237a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    237e:	18 16       	cp	r1, r24
    2380:	4c f5       	brge	.+82     	; 0x23d4 <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2382:	69 8d       	ldd	r22, Y+25	; 0x19
    2384:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2386:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2388:	9c 8d       	ldd	r25, Y+28	; 0x1c
    238a:	20 e0       	ldi	r18, 0x00	; 0
    238c:	30 e0       	ldi	r19, 0x00	; 0
    238e:	40 e2       	ldi	r20, 0x20	; 32
    2390:	51 e4       	ldi	r21, 0x41	; 65
    2392:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2396:	dc 01       	movw	r26, r24
    2398:	cb 01       	movw	r24, r22
    239a:	bc 01       	movw	r22, r24
    239c:	cd 01       	movw	r24, r26
    239e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23a2:	dc 01       	movw	r26, r24
    23a4:	cb 01       	movw	r24, r22
    23a6:	9c 8b       	std	Y+20, r25	; 0x14
    23a8:	8b 8b       	std	Y+19, r24	; 0x13
    23aa:	0f c0       	rjmp	.+30     	; 0x23ca <LCD_displayCharacter+0x7be>
    23ac:	89 e1       	ldi	r24, 0x19	; 25
    23ae:	90 e0       	ldi	r25, 0x00	; 0
    23b0:	9a 8b       	std	Y+18, r25	; 0x12
    23b2:	89 8b       	std	Y+17, r24	; 0x11
    23b4:	89 89       	ldd	r24, Y+17	; 0x11
    23b6:	9a 89       	ldd	r25, Y+18	; 0x12
    23b8:	01 97       	sbiw	r24, 0x01	; 1
    23ba:	f1 f7       	brne	.-4      	; 0x23b8 <LCD_displayCharacter+0x7ac>
    23bc:	9a 8b       	std	Y+18, r25	; 0x12
    23be:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23c0:	8b 89       	ldd	r24, Y+19	; 0x13
    23c2:	9c 89       	ldd	r25, Y+20	; 0x14
    23c4:	01 97       	sbiw	r24, 0x01	; 1
    23c6:	9c 8b       	std	Y+20, r25	; 0x14
    23c8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23ca:	8b 89       	ldd	r24, Y+19	; 0x13
    23cc:	9c 89       	ldd	r25, Y+20	; 0x14
    23ce:	00 97       	sbiw	r24, 0x00	; 0
    23d0:	69 f7       	brne	.-38     	; 0x23ac <LCD_displayCharacter+0x7a0>
    23d2:	14 c0       	rjmp	.+40     	; 0x23fc <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23d4:	6d 89       	ldd	r22, Y+21	; 0x15
    23d6:	7e 89       	ldd	r23, Y+22	; 0x16
    23d8:	8f 89       	ldd	r24, Y+23	; 0x17
    23da:	98 8d       	ldd	r25, Y+24	; 0x18
    23dc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23e0:	dc 01       	movw	r26, r24
    23e2:	cb 01       	movw	r24, r22
    23e4:	9c 8b       	std	Y+20, r25	; 0x14
    23e6:	8b 8b       	std	Y+19, r24	; 0x13
    23e8:	8b 89       	ldd	r24, Y+19	; 0x13
    23ea:	9c 89       	ldd	r25, Y+20	; 0x14
    23ec:	98 8b       	std	Y+16, r25	; 0x10
    23ee:	8f 87       	std	Y+15, r24	; 0x0f
    23f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    23f2:	98 89       	ldd	r25, Y+16	; 0x10
    23f4:	01 97       	sbiw	r24, 0x01	; 1
    23f6:	f1 f7       	brne	.-4      	; 0x23f4 <LCD_displayCharacter+0x7e8>
    23f8:	98 8b       	std	Y+16, r25	; 0x10
    23fa:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    23fc:	80 e0       	ldi	r24, 0x00	; 0
    23fe:	62 e0       	ldi	r22, 0x02	; 2
    2400:	40 e0       	ldi	r20, 0x00	; 0
    2402:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>
    2406:	80 e0       	ldi	r24, 0x00	; 0
    2408:	90 e0       	ldi	r25, 0x00	; 0
    240a:	a0 e8       	ldi	r26, 0x80	; 128
    240c:	bf e3       	ldi	r27, 0x3F	; 63
    240e:	8b 87       	std	Y+11, r24	; 0x0b
    2410:	9c 87       	std	Y+12, r25	; 0x0c
    2412:	ad 87       	std	Y+13, r26	; 0x0d
    2414:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2416:	6b 85       	ldd	r22, Y+11	; 0x0b
    2418:	7c 85       	ldd	r23, Y+12	; 0x0c
    241a:	8d 85       	ldd	r24, Y+13	; 0x0d
    241c:	9e 85       	ldd	r25, Y+14	; 0x0e
    241e:	20 e0       	ldi	r18, 0x00	; 0
    2420:	30 e0       	ldi	r19, 0x00	; 0
    2422:	4a e7       	ldi	r20, 0x7A	; 122
    2424:	53 e4       	ldi	r21, 0x43	; 67
    2426:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    242a:	dc 01       	movw	r26, r24
    242c:	cb 01       	movw	r24, r22
    242e:	8f 83       	std	Y+7, r24	; 0x07
    2430:	98 87       	std	Y+8, r25	; 0x08
    2432:	a9 87       	std	Y+9, r26	; 0x09
    2434:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2436:	6f 81       	ldd	r22, Y+7	; 0x07
    2438:	78 85       	ldd	r23, Y+8	; 0x08
    243a:	89 85       	ldd	r24, Y+9	; 0x09
    243c:	9a 85       	ldd	r25, Y+10	; 0x0a
    243e:	20 e0       	ldi	r18, 0x00	; 0
    2440:	30 e0       	ldi	r19, 0x00	; 0
    2442:	40 e8       	ldi	r20, 0x80	; 128
    2444:	5f e3       	ldi	r21, 0x3F	; 63
    2446:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    244a:	88 23       	and	r24, r24
    244c:	2c f4       	brge	.+10     	; 0x2458 <LCD_displayCharacter+0x84c>
		__ticks = 1;
    244e:	81 e0       	ldi	r24, 0x01	; 1
    2450:	90 e0       	ldi	r25, 0x00	; 0
    2452:	9e 83       	std	Y+6, r25	; 0x06
    2454:	8d 83       	std	Y+5, r24	; 0x05
    2456:	3f c0       	rjmp	.+126    	; 0x24d6 <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    2458:	6f 81       	ldd	r22, Y+7	; 0x07
    245a:	78 85       	ldd	r23, Y+8	; 0x08
    245c:	89 85       	ldd	r24, Y+9	; 0x09
    245e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2460:	20 e0       	ldi	r18, 0x00	; 0
    2462:	3f ef       	ldi	r19, 0xFF	; 255
    2464:	4f e7       	ldi	r20, 0x7F	; 127
    2466:	57 e4       	ldi	r21, 0x47	; 71
    2468:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    246c:	18 16       	cp	r1, r24
    246e:	4c f5       	brge	.+82     	; 0x24c2 <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2470:	6b 85       	ldd	r22, Y+11	; 0x0b
    2472:	7c 85       	ldd	r23, Y+12	; 0x0c
    2474:	8d 85       	ldd	r24, Y+13	; 0x0d
    2476:	9e 85       	ldd	r25, Y+14	; 0x0e
    2478:	20 e0       	ldi	r18, 0x00	; 0
    247a:	30 e0       	ldi	r19, 0x00	; 0
    247c:	40 e2       	ldi	r20, 0x20	; 32
    247e:	51 e4       	ldi	r21, 0x41	; 65
    2480:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2484:	dc 01       	movw	r26, r24
    2486:	cb 01       	movw	r24, r22
    2488:	bc 01       	movw	r22, r24
    248a:	cd 01       	movw	r24, r26
    248c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2490:	dc 01       	movw	r26, r24
    2492:	cb 01       	movw	r24, r22
    2494:	9e 83       	std	Y+6, r25	; 0x06
    2496:	8d 83       	std	Y+5, r24	; 0x05
    2498:	0f c0       	rjmp	.+30     	; 0x24b8 <LCD_displayCharacter+0x8ac>
    249a:	89 e1       	ldi	r24, 0x19	; 25
    249c:	90 e0       	ldi	r25, 0x00	; 0
    249e:	9c 83       	std	Y+4, r25	; 0x04
    24a0:	8b 83       	std	Y+3, r24	; 0x03
    24a2:	8b 81       	ldd	r24, Y+3	; 0x03
    24a4:	9c 81       	ldd	r25, Y+4	; 0x04
    24a6:	01 97       	sbiw	r24, 0x01	; 1
    24a8:	f1 f7       	brne	.-4      	; 0x24a6 <LCD_displayCharacter+0x89a>
    24aa:	9c 83       	std	Y+4, r25	; 0x04
    24ac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24ae:	8d 81       	ldd	r24, Y+5	; 0x05
    24b0:	9e 81       	ldd	r25, Y+6	; 0x06
    24b2:	01 97       	sbiw	r24, 0x01	; 1
    24b4:	9e 83       	std	Y+6, r25	; 0x06
    24b6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24b8:	8d 81       	ldd	r24, Y+5	; 0x05
    24ba:	9e 81       	ldd	r25, Y+6	; 0x06
    24bc:	00 97       	sbiw	r24, 0x00	; 0
    24be:	69 f7       	brne	.-38     	; 0x249a <LCD_displayCharacter+0x88e>
    24c0:	14 c0       	rjmp	.+40     	; 0x24ea <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24c2:	6f 81       	ldd	r22, Y+7	; 0x07
    24c4:	78 85       	ldd	r23, Y+8	; 0x08
    24c6:	89 85       	ldd	r24, Y+9	; 0x09
    24c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    24ca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24ce:	dc 01       	movw	r26, r24
    24d0:	cb 01       	movw	r24, r22
    24d2:	9e 83       	std	Y+6, r25	; 0x06
    24d4:	8d 83       	std	Y+5, r24	; 0x05
    24d6:	8d 81       	ldd	r24, Y+5	; 0x05
    24d8:	9e 81       	ldd	r25, Y+6	; 0x06
    24da:	9a 83       	std	Y+2, r25	; 0x02
    24dc:	89 83       	std	Y+1, r24	; 0x01
    24de:	89 81       	ldd	r24, Y+1	; 0x01
    24e0:	9a 81       	ldd	r25, Y+2	; 0x02
    24e2:	01 97       	sbiw	r24, 0x01	; 1
    24e4:	f1 f7       	brne	.-4      	; 0x24e2 <LCD_displayCharacter+0x8d6>
    24e6:	9a 83       	std	Y+2, r25	; 0x02
    24e8:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    24ea:	cd 59       	subi	r28, 0x9D	; 157
    24ec:	df 4f       	sbci	r29, 0xFF	; 255
    24ee:	0f b6       	in	r0, 0x3f	; 63
    24f0:	f8 94       	cli
    24f2:	de bf       	out	0x3e, r29	; 62
    24f4:	0f be       	out	0x3f, r0	; 63
    24f6:	cd bf       	out	0x3d, r28	; 61
    24f8:	cf 91       	pop	r28
    24fa:	df 91       	pop	r29
    24fc:	1f 91       	pop	r17
    24fe:	0f 91       	pop	r16
    2500:	08 95       	ret

00002502 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2502:	df 93       	push	r29
    2504:	cf 93       	push	r28
    2506:	00 d0       	rcall	.+0      	; 0x2508 <LCD_displayString+0x6>
    2508:	0f 92       	push	r0
    250a:	cd b7       	in	r28, 0x3d	; 61
    250c:	de b7       	in	r29, 0x3e	; 62
    250e:	9b 83       	std	Y+3, r25	; 0x03
    2510:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2512:	19 82       	std	Y+1, r1	; 0x01
    2514:	0e c0       	rjmp	.+28     	; 0x2532 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2516:	89 81       	ldd	r24, Y+1	; 0x01
    2518:	28 2f       	mov	r18, r24
    251a:	30 e0       	ldi	r19, 0x00	; 0
    251c:	8a 81       	ldd	r24, Y+2	; 0x02
    251e:	9b 81       	ldd	r25, Y+3	; 0x03
    2520:	fc 01       	movw	r30, r24
    2522:	e2 0f       	add	r30, r18
    2524:	f3 1f       	adc	r31, r19
    2526:	80 81       	ld	r24, Z
    2528:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <LCD_displayCharacter>
		i++;
    252c:	89 81       	ldd	r24, Y+1	; 0x01
    252e:	8f 5f       	subi	r24, 0xFF	; 255
    2530:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2532:	89 81       	ldd	r24, Y+1	; 0x01
    2534:	28 2f       	mov	r18, r24
    2536:	30 e0       	ldi	r19, 0x00	; 0
    2538:	8a 81       	ldd	r24, Y+2	; 0x02
    253a:	9b 81       	ldd	r25, Y+3	; 0x03
    253c:	fc 01       	movw	r30, r24
    253e:	e2 0f       	add	r30, r18
    2540:	f3 1f       	adc	r31, r19
    2542:	80 81       	ld	r24, Z
    2544:	88 23       	and	r24, r24
    2546:	39 f7       	brne	.-50     	; 0x2516 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(Str[i]);
		i++;
	}

}
    2548:	0f 90       	pop	r0
    254a:	0f 90       	pop	r0
    254c:	0f 90       	pop	r0
    254e:	cf 91       	pop	r28
    2550:	df 91       	pop	r29
    2552:	08 95       	ret

00002554 <LCD_moveCursor>:


void LCD_moveCursor(uint8 row,uint8 col)
{
    2554:	df 93       	push	r29
    2556:	cf 93       	push	r28
    2558:	00 d0       	rcall	.+0      	; 0x255a <LCD_moveCursor+0x6>
    255a:	00 d0       	rcall	.+0      	; 0x255c <LCD_moveCursor+0x8>
    255c:	0f 92       	push	r0
    255e:	cd b7       	in	r28, 0x3d	; 61
    2560:	de b7       	in	r29, 0x3e	; 62
    2562:	8a 83       	std	Y+2, r24	; 0x02
    2564:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2566:	8a 81       	ldd	r24, Y+2	; 0x02
    2568:	28 2f       	mov	r18, r24
    256a:	30 e0       	ldi	r19, 0x00	; 0
    256c:	3d 83       	std	Y+5, r19	; 0x05
    256e:	2c 83       	std	Y+4, r18	; 0x04
    2570:	8c 81       	ldd	r24, Y+4	; 0x04
    2572:	9d 81       	ldd	r25, Y+5	; 0x05
    2574:	81 30       	cpi	r24, 0x01	; 1
    2576:	91 05       	cpc	r25, r1
    2578:	c1 f0       	breq	.+48     	; 0x25aa <LCD_moveCursor+0x56>
    257a:	2c 81       	ldd	r18, Y+4	; 0x04
    257c:	3d 81       	ldd	r19, Y+5	; 0x05
    257e:	22 30       	cpi	r18, 0x02	; 2
    2580:	31 05       	cpc	r19, r1
    2582:	2c f4       	brge	.+10     	; 0x258e <LCD_moveCursor+0x3a>
    2584:	8c 81       	ldd	r24, Y+4	; 0x04
    2586:	9d 81       	ldd	r25, Y+5	; 0x05
    2588:	00 97       	sbiw	r24, 0x00	; 0
    258a:	61 f0       	breq	.+24     	; 0x25a4 <LCD_moveCursor+0x50>
    258c:	19 c0       	rjmp	.+50     	; 0x25c0 <LCD_moveCursor+0x6c>
    258e:	2c 81       	ldd	r18, Y+4	; 0x04
    2590:	3d 81       	ldd	r19, Y+5	; 0x05
    2592:	22 30       	cpi	r18, 0x02	; 2
    2594:	31 05       	cpc	r19, r1
    2596:	69 f0       	breq	.+26     	; 0x25b2 <LCD_moveCursor+0x5e>
    2598:	8c 81       	ldd	r24, Y+4	; 0x04
    259a:	9d 81       	ldd	r25, Y+5	; 0x05
    259c:	83 30       	cpi	r24, 0x03	; 3
    259e:	91 05       	cpc	r25, r1
    25a0:	61 f0       	breq	.+24     	; 0x25ba <LCD_moveCursor+0x66>
    25a2:	0e c0       	rjmp	.+28     	; 0x25c0 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    25a4:	8b 81       	ldd	r24, Y+3	; 0x03
    25a6:	89 83       	std	Y+1, r24	; 0x01
    25a8:	0b c0       	rjmp	.+22     	; 0x25c0 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    25aa:	8b 81       	ldd	r24, Y+3	; 0x03
    25ac:	80 5c       	subi	r24, 0xC0	; 192
    25ae:	89 83       	std	Y+1, r24	; 0x01
    25b0:	07 c0       	rjmp	.+14     	; 0x25c0 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    25b2:	8b 81       	ldd	r24, Y+3	; 0x03
    25b4:	80 5f       	subi	r24, 0xF0	; 240
    25b6:	89 83       	std	Y+1, r24	; 0x01
    25b8:	03 c0       	rjmp	.+6      	; 0x25c0 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    25ba:	8b 81       	ldd	r24, Y+3	; 0x03
    25bc:	80 5b       	subi	r24, 0xB0	; 176
    25be:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    25c0:	89 81       	ldd	r24, Y+1	; 0x01
    25c2:	80 68       	ori	r24, 0x80	; 128
    25c4:	0e 94 8b 09 	call	0x1316	; 0x1316 <LCD_sendCommand>
}
    25c8:	0f 90       	pop	r0
    25ca:	0f 90       	pop	r0
    25cc:	0f 90       	pop	r0
    25ce:	0f 90       	pop	r0
    25d0:	0f 90       	pop	r0
    25d2:	cf 91       	pop	r28
    25d4:	df 91       	pop	r29
    25d6:	08 95       	ret

000025d8 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    25d8:	df 93       	push	r29
    25da:	cf 93       	push	r28
    25dc:	00 d0       	rcall	.+0      	; 0x25de <LCD_displayStringRowColumn+0x6>
    25de:	00 d0       	rcall	.+0      	; 0x25e0 <LCD_displayStringRowColumn+0x8>
    25e0:	cd b7       	in	r28, 0x3d	; 61
    25e2:	de b7       	in	r29, 0x3e	; 62
    25e4:	89 83       	std	Y+1, r24	; 0x01
    25e6:	6a 83       	std	Y+2, r22	; 0x02
    25e8:	5c 83       	std	Y+4, r21	; 0x04
    25ea:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    25ec:	89 81       	ldd	r24, Y+1	; 0x01
    25ee:	6a 81       	ldd	r22, Y+2	; 0x02
    25f0:	0e 94 aa 12 	call	0x2554	; 0x2554 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    25f4:	8b 81       	ldd	r24, Y+3	; 0x03
    25f6:	9c 81       	ldd	r25, Y+4	; 0x04
    25f8:	0e 94 81 12 	call	0x2502	; 0x2502 <LCD_displayString>
}
    25fc:	0f 90       	pop	r0
    25fe:	0f 90       	pop	r0
    2600:	0f 90       	pop	r0
    2602:	0f 90       	pop	r0
    2604:	cf 91       	pop	r28
    2606:	df 91       	pop	r29
    2608:	08 95       	ret

0000260a <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    260a:	df 93       	push	r29
    260c:	cf 93       	push	r28
    260e:	cd b7       	in	r28, 0x3d	; 61
    2610:	de b7       	in	r29, 0x3e	; 62
    2612:	62 97       	sbiw	r28, 0x12	; 18
    2614:	0f b6       	in	r0, 0x3f	; 63
    2616:	f8 94       	cli
    2618:	de bf       	out	0x3e, r29	; 62
    261a:	0f be       	out	0x3f, r0	; 63
    261c:	cd bf       	out	0x3d, r28	; 61
    261e:	9a 8b       	std	Y+18, r25	; 0x12
    2620:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2622:	89 89       	ldd	r24, Y+17	; 0x11
    2624:	9a 89       	ldd	r25, Y+18	; 0x12
    2626:	9e 01       	movw	r18, r28
    2628:	2f 5f       	subi	r18, 0xFF	; 255
    262a:	3f 4f       	sbci	r19, 0xFF	; 255
    262c:	b9 01       	movw	r22, r18
    262e:	4a e0       	ldi	r20, 0x0A	; 10
    2630:	50 e0       	ldi	r21, 0x00	; 0
    2632:	0e 94 5f 14 	call	0x28be	; 0x28be <itoa>
   LCD_displayString(buff); /* Display the string */
    2636:	ce 01       	movw	r24, r28
    2638:	01 96       	adiw	r24, 0x01	; 1
    263a:	0e 94 81 12 	call	0x2502	; 0x2502 <LCD_displayString>
}
    263e:	62 96       	adiw	r28, 0x12	; 18
    2640:	0f b6       	in	r0, 0x3f	; 63
    2642:	f8 94       	cli
    2644:	de bf       	out	0x3e, r29	; 62
    2646:	0f be       	out	0x3f, r0	; 63
    2648:	cd bf       	out	0x3d, r28	; 61
    264a:	cf 91       	pop	r28
    264c:	df 91       	pop	r29
    264e:	08 95       	ret

00002650 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2650:	df 93       	push	r29
    2652:	cf 93       	push	r28
    2654:	cd b7       	in	r28, 0x3d	; 61
    2656:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2658:	81 e0       	ldi	r24, 0x01	; 1
    265a:	0e 94 8b 09 	call	0x1316	; 0x1316 <LCD_sendCommand>
}
    265e:	cf 91       	pop	r28
    2660:	df 91       	pop	r29
    2662:	08 95       	ret

00002664 <main>:
#include <avr/interrupt.h>
#include "spi.h"
#include "lcd.h"

//#define SPI_DEFAULT_DATA_VALUE 0xFF
int main(){
    2664:	df 93       	push	r29
    2666:	cf 93       	push	r28
    2668:	0f 92       	push	r0
    266a:	cd b7       	in	r28, 0x3d	; 61
    266c:	de b7       	in	r29, 0x3e	; 62
		SPI_initSlave();
    266e:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <SPI_initSlave>
	uint8 data_received=0;
    2672:	19 82       	std	Y+1, r1	; 0x01
	LCD_init();
    2674:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <LCD_init>
	data_received = SPI_sendReceiveByte(SPI_DEFAULT_DATA_VALUE);
    2678:	8f ef       	ldi	r24, 0xFF	; 255
    267a:	0e 94 a1 13 	call	0x2742	; 0x2742 <SPI_sendReceiveByte>
    267e:	89 83       	std	Y+1, r24	; 0x01
	 LCD_intgerToString(data_received);
    2680:	89 81       	ldd	r24, Y+1	; 0x01
    2682:	88 2f       	mov	r24, r24
    2684:	90 e0       	ldi	r25, 0x00	; 0
    2686:	0e 94 05 13 	call	0x260a	; 0x260a <LCD_intgerToString>
	while(1){

		data_received = SPI_sendReceiveByte(SPI_DEFAULT_DATA_VALUE);
    268a:	8f ef       	ldi	r24, 0xFF	; 255
    268c:	0e 94 a1 13 	call	0x2742	; 0x2742 <SPI_sendReceiveByte>
    2690:	89 83       	std	Y+1, r24	; 0x01
			LCD_moveCursor(0,0);
    2692:	80 e0       	ldi	r24, 0x00	; 0
    2694:	60 e0       	ldi	r22, 0x00	; 0
    2696:	0e 94 aa 12 	call	0x2554	; 0x2554 <LCD_moveCursor>
			LCD_clearScreen();
    269a:	0e 94 28 13 	call	0x2650	; 0x2650 <LCD_clearScreen>
         LCD_intgerToString(data_received);
    269e:	89 81       	ldd	r24, Y+1	; 0x01
    26a0:	88 2f       	mov	r24, r24
    26a2:	90 e0       	ldi	r25, 0x00	; 0
    26a4:	0e 94 05 13 	call	0x260a	; 0x260a <LCD_intgerToString>
    26a8:	f0 cf       	rjmp	.-32     	; 0x268a <main+0x26>

000026aa <SPI_initMaster>:
#include "common_macros.h"
#include "avr/io.h"


void SPI_initMaster(void) 
{
    26aa:	df 93       	push	r29
    26ac:	cf 93       	push	r28
    26ae:	cd b7       	in	r28, 0x3d	; 61
    26b0:	de b7       	in	r29, 0x3e	; 62

	GPIO_setupPinDirection(PORTB_ID,PIN4_ID,PIN_OUTPUT);
    26b2:	81 e0       	ldi	r24, 0x01	; 1
    26b4:	64 e0       	ldi	r22, 0x04	; 4
    26b6:	41 e0       	ldi	r20, 0x01	; 1
    26b8:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN5_ID,PIN_OUTPUT);
    26bc:	81 e0       	ldi	r24, 0x01	; 1
    26be:	65 e0       	ldi	r22, 0x05	; 5
    26c0:	41 e0       	ldi	r20, 0x01	; 1
    26c2:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN6_ID,PIN_INPUT);
    26c6:	81 e0       	ldi	r24, 0x01	; 1
    26c8:	66 e0       	ldi	r22, 0x06	; 6
    26ca:	40 e0       	ldi	r20, 0x00	; 0
    26cc:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN7_ID,PIN_OUTPUT);
    26d0:	81 e0       	ldi	r24, 0x01	; 1
    26d2:	67 e0       	ldi	r22, 0x07	; 7
    26d4:	41 e0       	ldi	r20, 0x01	; 1
    26d6:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_setupPinDirection>
	

	SPCR = (1<<SPE) | (1<<MSTR);
    26da:	ed e2       	ldi	r30, 0x2D	; 45
    26dc:	f0 e0       	ldi	r31, 0x00	; 0
    26de:	80 e5       	ldi	r24, 0x50	; 80
    26e0:	80 83       	st	Z, r24


	SPSR &= ~(1<<SPI2X);
    26e2:	ae e2       	ldi	r26, 0x2E	; 46
    26e4:	b0 e0       	ldi	r27, 0x00	; 0
    26e6:	ee e2       	ldi	r30, 0x2E	; 46
    26e8:	f0 e0       	ldi	r31, 0x00	; 0
    26ea:	80 81       	ld	r24, Z
    26ec:	8e 7f       	andi	r24, 0xFE	; 254
    26ee:	8c 93       	st	X, r24
}
    26f0:	cf 91       	pop	r28
    26f2:	df 91       	pop	r29
    26f4:	08 95       	ret

000026f6 <SPI_initSlave>:


void SPI_initSlave(void)
{ 
    26f6:	df 93       	push	r29
    26f8:	cf 93       	push	r28
    26fa:	cd b7       	in	r28, 0x3d	; 61
    26fc:	de b7       	in	r29, 0x3e	; 62

	GPIO_setupPinDirection(PORTB_ID,PIN4_ID,PIN_INPUT);
    26fe:	81 e0       	ldi	r24, 0x01	; 1
    2700:	64 e0       	ldi	r22, 0x04	; 4
    2702:	40 e0       	ldi	r20, 0x00	; 0
    2704:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN5_ID,PIN_INPUT);
    2708:	81 e0       	ldi	r24, 0x01	; 1
    270a:	65 e0       	ldi	r22, 0x05	; 5
    270c:	40 e0       	ldi	r20, 0x00	; 0
    270e:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN6_ID,PIN_OUTPUT);
    2712:	81 e0       	ldi	r24, 0x01	; 1
    2714:	66 e0       	ldi	r22, 0x06	; 6
    2716:	41 e0       	ldi	r20, 0x01	; 1
    2718:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN7_ID,PIN_INPUT);
    271c:	81 e0       	ldi	r24, 0x01	; 1
    271e:	67 e0       	ldi	r22, 0x07	; 7
    2720:	40 e0       	ldi	r20, 0x00	; 0
    2722:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_setupPinDirection>


	SPCR = (1<<SPE);
    2726:	ed e2       	ldi	r30, 0x2D	; 45
    2728:	f0 e0       	ldi	r31, 0x00	; 0
    272a:	80 e4       	ldi	r24, 0x40	; 64
    272c:	80 83       	st	Z, r24

	SPSR &= ~(1<<SPI2X);
    272e:	ae e2       	ldi	r26, 0x2E	; 46
    2730:	b0 e0       	ldi	r27, 0x00	; 0
    2732:	ee e2       	ldi	r30, 0x2E	; 46
    2734:	f0 e0       	ldi	r31, 0x00	; 0
    2736:	80 81       	ld	r24, Z
    2738:	8e 7f       	andi	r24, 0xFE	; 254
    273a:	8c 93       	st	X, r24
}
    273c:	cf 91       	pop	r28
    273e:	df 91       	pop	r29
    2740:	08 95       	ret

00002742 <SPI_sendReceiveByte>:


uint8 SPI_sendReceiveByte(uint8 data)
{
    2742:	df 93       	push	r29
    2744:	cf 93       	push	r28
    2746:	0f 92       	push	r0
    2748:	cd b7       	in	r28, 0x3d	; 61
    274a:	de b7       	in	r29, 0x3e	; 62
    274c:	89 83       	std	Y+1, r24	; 0x01
	SPDR = data;
    274e:	ef e2       	ldi	r30, 0x2F	; 47
    2750:	f0 e0       	ldi	r31, 0x00	; 0
    2752:	89 81       	ldd	r24, Y+1	; 0x01
    2754:	80 83       	st	Z, r24

	while(BIT_IS_CLEAR(SPSR,SPIF)){}
    2756:	ee e2       	ldi	r30, 0x2E	; 46
    2758:	f0 e0       	ldi	r31, 0x00	; 0
    275a:	80 81       	ld	r24, Z
    275c:	88 23       	and	r24, r24
    275e:	dc f7       	brge	.-10     	; 0x2756 <SPI_sendReceiveByte+0x14>


	return SPDR;
    2760:	ef e2       	ldi	r30, 0x2F	; 47
    2762:	f0 e0       	ldi	r31, 0x00	; 0
    2764:	80 81       	ld	r24, Z
}
    2766:	0f 90       	pop	r0
    2768:	cf 91       	pop	r28
    276a:	df 91       	pop	r29
    276c:	08 95       	ret

0000276e <SPI_sendString>:


void SPI_sendString(const uint8 *str)
{
    276e:	df 93       	push	r29
    2770:	cf 93       	push	r28
    2772:	00 d0       	rcall	.+0      	; 0x2774 <SPI_sendString+0x6>
    2774:	00 d0       	rcall	.+0      	; 0x2776 <SPI_sendString+0x8>
    2776:	cd b7       	in	r28, 0x3d	; 61
    2778:	de b7       	in	r29, 0x3e	; 62
    277a:	9c 83       	std	Y+4, r25	; 0x04
    277c:	8b 83       	std	Y+3, r24	; 0x03
	uint8 i = 0;
    277e:	1a 82       	std	Y+2, r1	; 0x02
	uint8 received_data = 0;
    2780:	19 82       	std	Y+1, r1	; 0x01
    2782:	0f c0       	rjmp	.+30     	; 0x27a2 <SPI_sendString+0x34>

	while(str[i] != '\0')
	{

		received_data = SPI_sendReceiveByte(str[i]);
    2784:	8a 81       	ldd	r24, Y+2	; 0x02
    2786:	28 2f       	mov	r18, r24
    2788:	30 e0       	ldi	r19, 0x00	; 0
    278a:	8b 81       	ldd	r24, Y+3	; 0x03
    278c:	9c 81       	ldd	r25, Y+4	; 0x04
    278e:	fc 01       	movw	r30, r24
    2790:	e2 0f       	add	r30, r18
    2792:	f3 1f       	adc	r31, r19
    2794:	80 81       	ld	r24, Z
    2796:	0e 94 a1 13 	call	0x2742	; 0x2742 <SPI_sendReceiveByte>
    279a:	89 83       	std	Y+1, r24	; 0x01
		i++;
    279c:	8a 81       	ldd	r24, Y+2	; 0x02
    279e:	8f 5f       	subi	r24, 0xFF	; 255
    27a0:	8a 83       	std	Y+2, r24	; 0x02
void SPI_sendString(const uint8 *str)
{
	uint8 i = 0;
	uint8 received_data = 0;

	while(str[i] != '\0')
    27a2:	8a 81       	ldd	r24, Y+2	; 0x02
    27a4:	28 2f       	mov	r18, r24
    27a6:	30 e0       	ldi	r19, 0x00	; 0
    27a8:	8b 81       	ldd	r24, Y+3	; 0x03
    27aa:	9c 81       	ldd	r25, Y+4	; 0x04
    27ac:	fc 01       	movw	r30, r24
    27ae:	e2 0f       	add	r30, r18
    27b0:	f3 1f       	adc	r31, r19
    27b2:	80 81       	ld	r24, Z
    27b4:	88 23       	and	r24, r24
    27b6:	31 f7       	brne	.-52     	; 0x2784 <SPI_sendString+0x16>
	{

		received_data = SPI_sendReceiveByte(str[i]);
		i++;
	}
}
    27b8:	0f 90       	pop	r0
    27ba:	0f 90       	pop	r0
    27bc:	0f 90       	pop	r0
    27be:	0f 90       	pop	r0
    27c0:	cf 91       	pop	r28
    27c2:	df 91       	pop	r29
    27c4:	08 95       	ret

000027c6 <SPI_receiveString>:


void SPI_receiveString(uint8 *str)
{
    27c6:	0f 93       	push	r16
    27c8:	1f 93       	push	r17
    27ca:	df 93       	push	r29
    27cc:	cf 93       	push	r28
    27ce:	00 d0       	rcall	.+0      	; 0x27d0 <SPI_receiveString+0xa>
    27d0:	0f 92       	push	r0
    27d2:	cd b7       	in	r28, 0x3d	; 61
    27d4:	de b7       	in	r29, 0x3e	; 62
    27d6:	9b 83       	std	Y+3, r25	; 0x03
    27d8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    27da:	19 82       	std	Y+1, r1	; 0x01

	str[i] = SPI_sendReceiveByte(SPI_DEFAULT_DATA_VALUE);
    27dc:	89 81       	ldd	r24, Y+1	; 0x01
    27de:	28 2f       	mov	r18, r24
    27e0:	30 e0       	ldi	r19, 0x00	; 0
    27e2:	8a 81       	ldd	r24, Y+2	; 0x02
    27e4:	9b 81       	ldd	r25, Y+3	; 0x03
    27e6:	8c 01       	movw	r16, r24
    27e8:	02 0f       	add	r16, r18
    27ea:	13 1f       	adc	r17, r19
    27ec:	8f ef       	ldi	r24, 0xFF	; 255
    27ee:	0e 94 a1 13 	call	0x2742	; 0x2742 <SPI_sendReceiveByte>
    27f2:	f8 01       	movw	r30, r16
    27f4:	80 83       	st	Z, r24
    27f6:	10 c0       	rjmp	.+32     	; 0x2818 <SPI_receiveString+0x52>

	while(str[i] != '#')
	{
		i++;
    27f8:	89 81       	ldd	r24, Y+1	; 0x01
    27fa:	8f 5f       	subi	r24, 0xFF	; 255
    27fc:	89 83       	std	Y+1, r24	; 0x01
		str[i] = SPI_sendReceiveByte(SPI_DEFAULT_DATA_VALUE);
    27fe:	89 81       	ldd	r24, Y+1	; 0x01
    2800:	28 2f       	mov	r18, r24
    2802:	30 e0       	ldi	r19, 0x00	; 0
    2804:	8a 81       	ldd	r24, Y+2	; 0x02
    2806:	9b 81       	ldd	r25, Y+3	; 0x03
    2808:	8c 01       	movw	r16, r24
    280a:	02 0f       	add	r16, r18
    280c:	13 1f       	adc	r17, r19
    280e:	8f ef       	ldi	r24, 0xFF	; 255
    2810:	0e 94 a1 13 	call	0x2742	; 0x2742 <SPI_sendReceiveByte>
    2814:	f8 01       	movw	r30, r16
    2816:	80 83       	st	Z, r24
{
	uint8 i = 0;

	str[i] = SPI_sendReceiveByte(SPI_DEFAULT_DATA_VALUE);

	while(str[i] != '#')
    2818:	89 81       	ldd	r24, Y+1	; 0x01
    281a:	28 2f       	mov	r18, r24
    281c:	30 e0       	ldi	r19, 0x00	; 0
    281e:	8a 81       	ldd	r24, Y+2	; 0x02
    2820:	9b 81       	ldd	r25, Y+3	; 0x03
    2822:	fc 01       	movw	r30, r24
    2824:	e2 0f       	add	r30, r18
    2826:	f3 1f       	adc	r31, r19
    2828:	80 81       	ld	r24, Z
    282a:	83 32       	cpi	r24, 0x23	; 35
    282c:	29 f7       	brne	.-54     	; 0x27f8 <SPI_receiveString+0x32>
	{
		i++;
		str[i] = SPI_sendReceiveByte(SPI_DEFAULT_DATA_VALUE);
	}

	str[i] = '\0';
    282e:	89 81       	ldd	r24, Y+1	; 0x01
    2830:	28 2f       	mov	r18, r24
    2832:	30 e0       	ldi	r19, 0x00	; 0
    2834:	8a 81       	ldd	r24, Y+2	; 0x02
    2836:	9b 81       	ldd	r25, Y+3	; 0x03
    2838:	fc 01       	movw	r30, r24
    283a:	e2 0f       	add	r30, r18
    283c:	f3 1f       	adc	r31, r19
    283e:	10 82       	st	Z, r1
}
    2840:	0f 90       	pop	r0
    2842:	0f 90       	pop	r0
    2844:	0f 90       	pop	r0
    2846:	cf 91       	pop	r28
    2848:	df 91       	pop	r29
    284a:	1f 91       	pop	r17
    284c:	0f 91       	pop	r16
    284e:	08 95       	ret

00002850 <__prologue_saves__>:
    2850:	2f 92       	push	r2
    2852:	3f 92       	push	r3
    2854:	4f 92       	push	r4
    2856:	5f 92       	push	r5
    2858:	6f 92       	push	r6
    285a:	7f 92       	push	r7
    285c:	8f 92       	push	r8
    285e:	9f 92       	push	r9
    2860:	af 92       	push	r10
    2862:	bf 92       	push	r11
    2864:	cf 92       	push	r12
    2866:	df 92       	push	r13
    2868:	ef 92       	push	r14
    286a:	ff 92       	push	r15
    286c:	0f 93       	push	r16
    286e:	1f 93       	push	r17
    2870:	cf 93       	push	r28
    2872:	df 93       	push	r29
    2874:	cd b7       	in	r28, 0x3d	; 61
    2876:	de b7       	in	r29, 0x3e	; 62
    2878:	ca 1b       	sub	r28, r26
    287a:	db 0b       	sbc	r29, r27
    287c:	0f b6       	in	r0, 0x3f	; 63
    287e:	f8 94       	cli
    2880:	de bf       	out	0x3e, r29	; 62
    2882:	0f be       	out	0x3f, r0	; 63
    2884:	cd bf       	out	0x3d, r28	; 61
    2886:	09 94       	ijmp

00002888 <__epilogue_restores__>:
    2888:	2a 88       	ldd	r2, Y+18	; 0x12
    288a:	39 88       	ldd	r3, Y+17	; 0x11
    288c:	48 88       	ldd	r4, Y+16	; 0x10
    288e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2890:	6e 84       	ldd	r6, Y+14	; 0x0e
    2892:	7d 84       	ldd	r7, Y+13	; 0x0d
    2894:	8c 84       	ldd	r8, Y+12	; 0x0c
    2896:	9b 84       	ldd	r9, Y+11	; 0x0b
    2898:	aa 84       	ldd	r10, Y+10	; 0x0a
    289a:	b9 84       	ldd	r11, Y+9	; 0x09
    289c:	c8 84       	ldd	r12, Y+8	; 0x08
    289e:	df 80       	ldd	r13, Y+7	; 0x07
    28a0:	ee 80       	ldd	r14, Y+6	; 0x06
    28a2:	fd 80       	ldd	r15, Y+5	; 0x05
    28a4:	0c 81       	ldd	r16, Y+4	; 0x04
    28a6:	1b 81       	ldd	r17, Y+3	; 0x03
    28a8:	aa 81       	ldd	r26, Y+2	; 0x02
    28aa:	b9 81       	ldd	r27, Y+1	; 0x01
    28ac:	ce 0f       	add	r28, r30
    28ae:	d1 1d       	adc	r29, r1
    28b0:	0f b6       	in	r0, 0x3f	; 63
    28b2:	f8 94       	cli
    28b4:	de bf       	out	0x3e, r29	; 62
    28b6:	0f be       	out	0x3f, r0	; 63
    28b8:	cd bf       	out	0x3d, r28	; 61
    28ba:	ed 01       	movw	r28, r26
    28bc:	08 95       	ret

000028be <itoa>:
    28be:	fb 01       	movw	r30, r22
    28c0:	9f 01       	movw	r18, r30
    28c2:	e8 94       	clt
    28c4:	42 30       	cpi	r20, 0x02	; 2
    28c6:	c4 f0       	brlt	.+48     	; 0x28f8 <itoa+0x3a>
    28c8:	45 32       	cpi	r20, 0x25	; 37
    28ca:	b4 f4       	brge	.+44     	; 0x28f8 <itoa+0x3a>
    28cc:	4a 30       	cpi	r20, 0x0A	; 10
    28ce:	29 f4       	brne	.+10     	; 0x28da <itoa+0x1c>
    28d0:	97 fb       	bst	r25, 7
    28d2:	1e f4       	brtc	.+6      	; 0x28da <itoa+0x1c>
    28d4:	90 95       	com	r25
    28d6:	81 95       	neg	r24
    28d8:	9f 4f       	sbci	r25, 0xFF	; 255
    28da:	64 2f       	mov	r22, r20
    28dc:	77 27       	eor	r23, r23
    28de:	0e 94 90 14 	call	0x2920	; 0x2920 <__udivmodhi4>
    28e2:	80 5d       	subi	r24, 0xD0	; 208
    28e4:	8a 33       	cpi	r24, 0x3A	; 58
    28e6:	0c f0       	brlt	.+2      	; 0x28ea <itoa+0x2c>
    28e8:	89 5d       	subi	r24, 0xD9	; 217
    28ea:	81 93       	st	Z+, r24
    28ec:	cb 01       	movw	r24, r22
    28ee:	00 97       	sbiw	r24, 0x00	; 0
    28f0:	a1 f7       	brne	.-24     	; 0x28da <itoa+0x1c>
    28f2:	16 f4       	brtc	.+4      	; 0x28f8 <itoa+0x3a>
    28f4:	5d e2       	ldi	r21, 0x2D	; 45
    28f6:	51 93       	st	Z+, r21
    28f8:	10 82       	st	Z, r1
    28fa:	c9 01       	movw	r24, r18
    28fc:	0c 94 80 14 	jmp	0x2900	; 0x2900 <strrev>

00002900 <strrev>:
    2900:	dc 01       	movw	r26, r24
    2902:	fc 01       	movw	r30, r24
    2904:	67 2f       	mov	r22, r23
    2906:	71 91       	ld	r23, Z+
    2908:	77 23       	and	r23, r23
    290a:	e1 f7       	brne	.-8      	; 0x2904 <strrev+0x4>
    290c:	32 97       	sbiw	r30, 0x02	; 2
    290e:	04 c0       	rjmp	.+8      	; 0x2918 <strrev+0x18>
    2910:	7c 91       	ld	r23, X
    2912:	6d 93       	st	X+, r22
    2914:	70 83       	st	Z, r23
    2916:	62 91       	ld	r22, -Z
    2918:	ae 17       	cp	r26, r30
    291a:	bf 07       	cpc	r27, r31
    291c:	c8 f3       	brcs	.-14     	; 0x2910 <strrev+0x10>
    291e:	08 95       	ret

00002920 <__udivmodhi4>:
    2920:	aa 1b       	sub	r26, r26
    2922:	bb 1b       	sub	r27, r27
    2924:	51 e1       	ldi	r21, 0x11	; 17
    2926:	07 c0       	rjmp	.+14     	; 0x2936 <__udivmodhi4_ep>

00002928 <__udivmodhi4_loop>:
    2928:	aa 1f       	adc	r26, r26
    292a:	bb 1f       	adc	r27, r27
    292c:	a6 17       	cp	r26, r22
    292e:	b7 07       	cpc	r27, r23
    2930:	10 f0       	brcs	.+4      	; 0x2936 <__udivmodhi4_ep>
    2932:	a6 1b       	sub	r26, r22
    2934:	b7 0b       	sbc	r27, r23

00002936 <__udivmodhi4_ep>:
    2936:	88 1f       	adc	r24, r24
    2938:	99 1f       	adc	r25, r25
    293a:	5a 95       	dec	r21
    293c:	a9 f7       	brne	.-22     	; 0x2928 <__udivmodhi4_loop>
    293e:	80 95       	com	r24
    2940:	90 95       	com	r25
    2942:	bc 01       	movw	r22, r24
    2944:	cd 01       	movw	r24, r26
    2946:	08 95       	ret

00002948 <_exit>:
    2948:	f8 94       	cli

0000294a <__stop_program>:
    294a:	ff cf       	rjmp	.-2      	; 0x294a <__stop_program>
